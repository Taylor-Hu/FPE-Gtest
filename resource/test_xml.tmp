  <testsuite name="TestRtos" tests="82/82" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_RTOS_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_INIT2" description="测试模块是否可被销毁" status="run" classname="TestRtos" time="0.1"/>
    <testcase name="TEST_RTOS_INIT3" description="测试CH_RTOS_GetVersion是否成功" status="run" classname="TestRtos" time="0.003"/>
    <testcase name="TEST_RTOS_TASK1" description="测试rpv_StackPtr为NULL，其余参数合法时是否可以成功创建任务&#x09;" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_TASK2" description="是否可以通过CH_RTOS_WaitTaskTerm等待成功&#x09;" status="run" classname="TestRtos" time="0.2"/>
    <testcase name="TEST_RTOS_TASK3" description="测试是否可以通过CH_RTOS_KillTask删除刚刚创建的任务" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_TASK4" description="测试是否可以通过CH_RTOS_DeleteTask删除刚刚创建的任务" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_TASK5" description="测试当 ri_TimeOutMS=-1时，CH_RTOS_WaitTaskTerm是否执行正确" status="run" classname="TestRtos" time="0.05"/>
    <testcase name="TEST_RTOS_TASK6" description="测试当 ri_TimeOutMS=1s,2s,5s时，CH_RTOS_WaitTaskTerm等待时间是否匹配" status="run" classname="TestRtos" time="8.1"/>
    <testcase name="TEST_RTOS_TASK7" description="测试rpv_StackPtr不为NULL，其余参数合法时是否可以成功创建任务" status="run" classname="TestRtos" time="0.051"/>
    <testcase name="TEST_RTOS_TASK8" description="测试rpv_Param不为NULL时，是否被真正传递" status="run" classname="TestRtos" time="0.051"/>
    <testcase name="TEST_RTOS_TASK9" description="测试ri_Priority为-1时，是否可以成功创建任务" status="run" classname="TestRtos" time="10.038">
      <failure message="Expected: (CH_RTOS_CreateTask(test_task_prams, __null, __null, 1024 * 8, -1, (S8*)&quot;test_rtos_task_01&quot;, &amp;gh_Task[0])) != (CH_RTOS_OK), actual: 0(0x0) vs 0(0x0)" type=""><![CDATA[gtest/case/module/test_rtos.cpp:244<br />
Expected: (CH_RTOS_CreateTask(test_task_prams, __null, __null, 1024 * 8, -1, (S8*)"test_rtos_task_01", &gh_Task[0])) != (CH_RTOS_OK), actual: 0(0x0) vs 0(0x0)]]></failure>
      <failure message="Value of: CH_RTOS_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_RTOS_WaitTaskTerm(gh_Task[0], 10000)&#x0A;Which is: 7(0x7)" type=""><![CDATA[gtest/case/module/test_rtos.cpp:247<br />
Value of: CH_RTOS_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_RTOS_WaitTaskTerm(gh_Task[0], 10000)<br />
Which is: 7(0x7)]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_TASK10" description="测试ri_Priority为255时，是否可以成功创建任务" status="run" classname="TestRtos" time="10.066">
      <failure message="Value of: CH_RTOS_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_RTOS_WaitTaskTerm(gh_Task[0], 10000)&#x0A;Which is: 7(0x7)" type=""><![CDATA[gtest/case/module/test_rtos.cpp:263<br />
Value of: CH_RTOS_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_RTOS_WaitTaskTerm(gh_Task[0], 10000)<br />
Which is: 7(0x7)]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_TASK11" description="测试rpuc_Name不为NULL且相同时，是否可以成功创建任务" status="run" classname="TestRtos" time="0.051"/>
    <testcase name="TEST_RTOS_TASK12" description="测试rpuc_Name为NULL时，是否可以成功创建任务" status="run" classname="TestRtos" time="10.067">
      <failure message="Value of: CH_RTOS_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_RTOS_WaitTaskTerm(gh_Task[0], 10000)&#x0A;Which is: 7(0x7)" type=""><![CDATA[gtest/case/module/test_rtos.cpp:312<br />
Value of: CH_RTOS_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_RTOS_WaitTaskTerm(gh_Task[0], 10000)<br />
Which is: 7(0x7)]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_TASK13" description="测试能否成功创建128个ri_StackSize大小为8K的任务" status="run" classname="TestRtos" time="0.144">
      <failure message="Value of: CH_RTOS_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_RTOS_CreateTask(test_task_prams, __null, __null, 1024 * 8, 10 + i, __null, &amp;gh_Task[i])&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_rtos.cpp:328<br />
Value of: CH_RTOS_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_RTOS_CreateTask(test_task_prams, __null, __null, 1024 * 8, 10 + i, __null, &gh_Task[i])<br />
Which is: 4(0x4)]]></failure>
      <failure message="Expected: (gh_Task[i]) != ((void*)__null), actual: NULL vs NULL&#x0A;创建第110个线程时失败" type=""><![CDATA[gtest/case/module/test_rtos.cpp:329<br />
Expected: (gh_Task[i]) != ((void*)__null), actual: NULL vs NULL<br />
创建第110个线程时失败]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_TASK14" description="测试能否删除正在运行的任务" status="run" classname="TestRtos" time="0.05"/>
    <testcase name="TEST_RTOS_TASK19" description="测试能否通过CH_RTOS_GetCurrentTaskId正确获得当前任务的ID" status="run" classname="TestRtos" time="0.1"/>
    <testcase name="TEST_RTOS_MES1" description="测试能否使用合法参数创建并删除一个消息" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_MES2" description="测试rph_MessageQ为NULL时是否能够成功创建一个消息" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_MES3" description="测试ri_MessageSize为0时是否能够成功创建一个消息" status="run" classname="TestRtos" time="0.016">
      <failure message="Expected: (CH_RTOS_CreateMessageQuene(0, num, &amp;handle)) != (CH_RTOS_OK), actual: 0(0x0) vs 0(0x0)" type=""><![CDATA[gtest/case/module/test_rtos.cpp:507<br />
Expected: (CH_RTOS_CreateMessageQuene(0, num, &handle)) != (CH_RTOS_OK), actual: 0(0x0) vs 0(0x0)]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_MES4" description="测试ri_MessageSize为64时是否能够成功创建一个消息" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_MES5" description="测试ri_MessageNumber为0时是否能够成功创建一个消息" status="run" classname="TestRtos" time="0.016">
      <failure message="Expected: (CH_RTOS_CreateMessageQuene(sizeof(mes), num, &amp;handle)) != (CH_RTOS_OK), actual: 0(0x0) vs 0(0x0)" type=""><![CDATA[gtest/case/module/test_rtos.cpp:528<br />
Expected: (CH_RTOS_CreateMessageQuene(sizeof(mes), num, &handle)) != (CH_RTOS_OK), actual: 0(0x0) vs 0(0x0)]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_MES6" description="测试ri_MessageNumber为128时是否能够成功创建一个消息" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_MES7" description="测试能否一次性创建64个ri_MessageSize=64，ri_MessageNumber=128的消息" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_MES8" description="测试能否重复删除一个消息" status="run" classname="TestRtos" time="0.015">
      <failure message="Value of: 1&#x0A;  Actual: 1(0x1)&#x0A;Expected: dead_test&#x0A;Which is: 0(0x0)&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_rtos.cpp:581<br />
Value of: 1<br />
  Actual: 1(0x1)<br />
Expected: dead_test<br />
Which is: 0(0x0)<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_MES9" description="多个线程+多个消息的强度测试" status="run" classname="TestRtos" time="0.059"/>
    <testcase name="TEST_RTOS_MUTEX1" description="测试参数合法时能否成功创建和销毁一个mutex" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_MUTEX2" description="测试能否重复销毁一个mutex" status="run" classname="TestRtos" time="0.015">
      <failure message="Value of: 1&#x0A;  Actual: 1(0x1)&#x0A;Expected: dead_test&#x0A;Which is: 0(0x0)&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_rtos.cpp:706<br />
Value of: 1<br />
  Actual: 1(0x1)<br />
Expected: dead_test<br />
Which is: 0(0x0)<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_MUTEX3" description="测试能否正确lock一个合法的mutex" status="run" classname="TestRtos" time="0.014">
      <failure message="Value of: 1&#x0A;  Actual: 1(0x1)&#x0A;Expected: dead_test&#x0A;Which is: 0(0x0)&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_rtos.cpp:726<br />
Value of: 1<br />
  Actual: 1(0x1)<br />
Expected: dead_test<br />
Which is: 0(0x0)<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_MUTEX4" description="测试能否lock一个已经被销毁的mutex" status="run" classname="TestRtos" time="0.015">
      <failure message="Value of: 1&#x0A;  Actual: 1(0x1)&#x0A;Expected: dead_test&#x0A;Which is: 0(0x0)&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_rtos.cpp:746<br />
Value of: 1<br />
  Actual: 1(0x1)<br />
Expected: dead_test<br />
Which is: 0(0x0)<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_MUTEX5" description="测试能否unlock一个合法的mutex" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_MUTEX6" description="测试能否重复unlock一个合法的mutex" status="run" classname="TestRtos" time="0.009">
      <failure message="Failed&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_rtos.cpp:777<br />
Failed<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_MUTEX7" description="测试能否unlock一个已经被销毁了的mutex" status="run" classname="TestRtos" time="0.014">
      <failure message="Value of: 1&#x0A;  Actual: 1(0x1)&#x0A;Expected: dead_test&#x0A;Which is: 0(0x0)&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_rtos.cpp:797<br />
Value of: 1<br />
  Actual: 1(0x1)<br />
Expected: dead_test<br />
Which is: 0(0x0)<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_MUTEX8" description="测试trylock一个已经被lock的mutex，是否成功" status="run" classname="TestRtos" time="0.029">
      <failure message="Value of: CH_RTOS_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: ret = CH_RTOS_TryLockMutex(handle)&#x0A;Which is: 4(0x4)&#x0A;LINUX系统会成功，其他系统可能会失败，无论成功失败都算通过" type=""><![CDATA[gtest/case/module/test_rtos.cpp:811<br />
Value of: CH_RTOS_OK<br />
  Actual: 0(0x0)<br />
Expected: ret = CH_RTOS_TryLockMutex(handle)<br />
Which is: 4(0x4)<br />
LINUX系统会成功，其他系统可能会失败，无论成功失败都算通过]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_MUTEX9" description="测试trylock一个unlock的mutex，是否成功" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_MUTEX10" description="测试lock过程中，unlock是否成功" status="run" classname="TestRtos" time="0.06"/>
    <testcase name="TEST_RTOS_MUTEX11" description="测试能否在不同的线程里lock一个mutex并且只有一个能成功" status="run" classname="TestRtos" time="0.165"/>
    <testcase name="TEST_RTOS_MUTEX12" description="测试能否一次性创建成功100个mutex" status="run" classname="TestRtos" time="0.001"/>
    <testcase name="TEST_RTOS_MUTEX13" description="多个线程+多个mutex的强度测试" status="run" classname="TestRtos" time="40.251"/>
    <testcase name="TEST_RTOS_EVENT1" description="测试能否正常创建和删除一个event" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_EVENT2" description="测试当rph_Event=NULL时能否创建even" status="run" classname="TestRtos" time="0.015">
      <failure message="Value of: 1&#x0A;  Actual: 1(0x1)&#x0A;Expected: dead_test&#x0A;Which is: 0(0x0)&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1045<br />
Value of: 1<br />
  Actual: 1(0x1)<br />
Expected: dead_test<br />
Which is: 0(0x0)<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_EVENT3" description="测试能否重复删除一个event" status="run" classname="TestRtos" time="0.015">
      <failure message="Value of: 1&#x0A;  Actual: 1(0x1)&#x0A;Expected: dead_test&#x0A;Which is: 0(0x0)&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1063<br />
Value of: 1<br />
  Actual: 1(0x1)<br />
Expected: dead_test<br />
Which is: 0(0x0)<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_EVENT4" description="测试能否set一个已经被删除了的event" status="run" classname="TestRtos" time="0.015">
      <failure message="Value of: 1&#x0A;  Actual: 1(0x1)&#x0A;Expected: dead_test&#x0A;Which is: 0(0x0)&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1081<br />
Value of: 1<br />
  Actual: 1(0x1)<br />
Expected: dead_test<br />
Which is: 0(0x0)<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_EVENT5" description="测试等待一个已经被删除了的event" status="run" classname="TestRtos" time="0.015">
      <failure message="Value of: 1&#x0A;  Actual: 1(0x1)&#x0A;Expected: dead_test&#x0A;Which is: 0(0x0)&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1099<br />
Value of: 1<br />
  Actual: 1(0x1)<br />
Expected: dead_test<br />
Which is: 0(0x0)<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_EVENT6" description="测试当rui_TargetEvents=0时是否可以成功等待event" status="run" classname="TestRtos" time="0.044">
      <failure message="Value of: CH_RTOS_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_RTOS_WaitEvent(handle, 0, &amp;ui_RetrievedEvents, CH_RTOS_EVENT_OP_AND, 100)&#x0A;Which is: 4(0x4)&#x0A;目标事件为0，应等待成功" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1110<br />
Value of: CH_RTOS_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_RTOS_WaitEvent(handle, 0, &ui_RetrievedEvents, CH_RTOS_EVENT_OP_AND, 100)<br />
Which is: 4(0x4)<br />
目标事件为0，应等待成功]]></failure>
      <failure message="Value of: CH_RTOS_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_RTOS_WaitEvent(handle, 0, &amp;ui_RetrievedEvents, CH_RTOS_EVENT_OP_OR, 100)&#x0A;Which is: 4(0x4)&#x0A;目标事件为0，应等待成功" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1111<br />
Value of: CH_RTOS_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_RTOS_WaitEvent(handle, 0, &ui_RetrievedEvents, CH_RTOS_EVENT_OP_OR, 100)<br />
Which is: 4(0x4)<br />
目标事件为0，应等待成功]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_EVENT7" description="测试当rpui_RetrievedEvents=NULL是否可以成功等待event" status="run" classname="TestRtos" time="0.015">
      <failure message="Value of: 1&#x0A;  Actual: 1(0x1)&#x0A;Expected: dead_test&#x0A;Which is: 0(0x0)&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1129<br />
Value of: 1<br />
  Actual: 1(0x1)<br />
Expected: dead_test<br />
Which is: 0(0x0)<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_EVENT8" description="测试当renm_OpMode=CH_RTOS_EVENT_OP_AND时，是否全部事件发生了才返回成功" status="run" classname="TestRtos" time="2.552">
      <failure message="Value of: (U32)ui_RetrievedEvents&#x0A;  Actual: 4369(0x1111)&#x0A;Expected: 0x111&#x0A;Which is: 273(0x111)" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1153<br />
Value of: (U32)ui_RetrievedEvents<br />
  Actual: 4369(0x1111)<br />
Expected: 0x111<br />
Which is: 273(0x111)]]></failure>
      <failure message="Value of: CH_RTOS_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_RTOS_WaitEvent(handle, 0x1000, &amp;ui_RetrievedEvents, CH_RTOS_EVENT_OP_AND, 500)&#x0A;Which is: 4(0x4)&#x0A;未取完的事件不应被清除" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1154<br />
Value of: CH_RTOS_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_RTOS_WaitEvent(handle, 0x1000, &ui_RetrievedEvents, CH_RTOS_EVENT_OP_AND, 500)<br />
Which is: 4(0x4)<br />
未取完的事件不应被清除]]></failure>
      <failure message="Value of: (U32)ui_RetrievedEvents&#x0A;  Actual: 0(0x0)&#x0A;Expected: 0x1000&#x0A;Which is: 4096(0x1000)" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1155<br />
Value of: (U32)ui_RetrievedEvents<br />
  Actual: 0(0x0)<br />
Expected: 0x1000<br />
Which is: 4096(0x1000)]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_EVENT9" description="测试当renm_OpMode=CH_RTOS_EVENT_OP_OR时，是否任一事件发生了即可返回成功" status="run" classname="TestRtos" time="1.056">
      <failure message="Value of: ui_RetrievedEvents&#x0A;  Actual: 1118208(0x111000)&#x0A;Expected: 0x1000&#x0A;Which is: 4096(0x1000)" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1186<br />
Value of: ui_RetrievedEvents<br />
  Actual: 1118208(0x111000)<br />
Expected: 0x1000<br />
Which is: 4096(0x1000)]]></failure>
      <failure message="Value of: CH_RTOS_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_RTOS_WaitEvent(handle, (U32)(-1), &amp;ui_RetrievedEvents, CH_RTOS_EVENT_OP_OR, 500)&#x0A;Which is: 4(0x4)&#x0A;任一事件发生即返回成功" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1189<br />
Value of: CH_RTOS_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_RTOS_WaitEvent(handle, (U32)(-1), &ui_RetrievedEvents, CH_RTOS_EVENT_OP_OR, 500)<br />
Which is: 4(0x4)<br />
任一事件发生即返回成功]]></failure>
      <failure message="Value of: ui_RetrievedEvents&#x0A;  Actual: 0(0x0)&#x0A;Expected: 0x110000&#x0A;Which is: 1114112(0x110000)&#x0A;剩余的事件不应被清除" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1190<br />
Value of: ui_RetrievedEvents<br />
  Actual: 0(0x0)<br />
Expected: 0x110000<br />
Which is: 1114112(0x110000)<br />
剩余的事件不应被清除]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_EVENT10" description="测试当ri_TimeOutMS=0时，等待函数是否立即返回" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_EVENT11" description="测试当ri_TimeOutMS=-1时，等待函数是否一直等待" status="run" classname="TestRtos" time="30.064"/>
    <testcase name="TEST_RTOS_EVENT12" description="测试当无事件发生时，等待函数等待时间是否与ri_TimeOutMS一致" status="run" classname="TestRtos" time="9.5"/>
    <testcase name="TEST_RTOS_EVENT13" description="测试多次set同一个事件后再发起等待，是否只能等待成功一次" status="run" classname="TestRtos" time="0.04"/>
    <testcase name="TEST_RTOS_EVENT14" description="测试等待过程中set事件，是否等待成功" status="run" classname="TestRtos" time="0.164"/>
    <testcase name="TEST_RTOS_MUTEX15" description="多个线程+多个EVENT的强度测试" status="run" classname="TestRtos" time="6.741">
      <failure message="Value of: i&#x0A;  Actual: 2(0x2)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 62(0x3e)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=2" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 2(0x2)<br />
Expected: gb_mutex_count<br />
Which is: 62(0x3e)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=2]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 3(0x3)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=3" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 3(0x3)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=3]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 4(0x4)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=4" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 4(0x4)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=4]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 5(0x5)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=5" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 5(0x5)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=5]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 6(0x6)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=6" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 6(0x6)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=6]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 7(0x7)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=7" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 7(0x7)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=7]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 8(0x8)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=8" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 8(0x8)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=8]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 9(0x9)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=9" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 9(0x9)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=9]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 10(0xa)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=10" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 10(0xa)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=10]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 11(0xb)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=11" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 11(0xb)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=11]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 12(0xc)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=12" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 12(0xc)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=12]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 13(0xd)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=13" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 13(0xd)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=13]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 14(0xe)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=14" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 14(0xe)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=14]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 15(0xf)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=15" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 15(0xf)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=15]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 16(0x10)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=16" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 16(0x10)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=16]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 17(0x11)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=17" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 17(0x11)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=17]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 18(0x12)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=18" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 18(0x12)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=18]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 19(0x13)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=19" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 19(0x13)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=19]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 20(0x14)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=20" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 20(0x14)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=20]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 21(0x15)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=21" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 21(0x15)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=21]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 22(0x16)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=22" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 22(0x16)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=22]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 23(0x17)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=23" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 23(0x17)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=23]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 24(0x18)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=24" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 24(0x18)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=24]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 25(0x19)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=25" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 25(0x19)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=25]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 26(0x1a)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=26" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 26(0x1a)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=26]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 27(0x1b)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=27" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 27(0x1b)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=27]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 28(0x1c)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=28" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 28(0x1c)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=28]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 29(0x1d)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=29" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 29(0x1d)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=29]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 30(0x1e)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=30" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 30(0x1e)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=30]]></failure>
      <failure message="Value of: i&#x0A;  Actual: 31(0x1f)&#x0A;Expected: gb_mutex_count&#x0A;Which is: 0(0x0)&#x0A;多个线程在等待事件，但只有一个线程能获取成功, i=31" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1357<br />
Value of: i<br />
  Actual: 31(0x1f)<br />
Expected: gb_mutex_count<br />
Which is: 0(0x0)<br />
多个线程在等待事件，但只有一个线程能获取成功, i=31]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_TIMER1" description="测试能否以合法参数创建成功一个一次性timer" status="run" classname="TestRtos" time="0.001"/>
    <testcase name="TEST_RTOS_TIMER2" description="测试刚刚创建的timer未start前没有运行" status="run" classname="TestRtos" time="1"/>
    <testcase name="TEST_RTOS_TIMER3" description="测试能否正常start刚刚创建的timer并使其正常运行" status="run" classname="TestRtos" time="0.03"/>
    <testcase name="TEST_RTOS_TIMER4" description="测试能正常stop正在运行的timer" status="run" classname="TestRtos" time="1"/>
    <testcase name="TEST_RTOS_TIMER5" description="测试能否以合法参数创建成功一个永久timer并能正常运行" status="run" classname="TestRtos" time="0.348"/>
    <testcase name="TEST_RTOS_TIMER6" description="测试能正常删除一个正在运行的timer" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_TIMER7" description="测试一次性创建16个timer，并且都能成功" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_MEM1" description="测试1000个字节内存的分配和释放是否成功" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_MEM2" description="测试8M内存的分配和释放是否成功" status="run" classname="TestRtos" time="0.001"/>
    <testcase name="TEST_RTOS_MEM3" description="测试内存大小不是4的整数倍的分配和释放是否成功" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_MEM4" description="测试分配大小为0字节的内存是否成功" status="run" classname="TestRtos" time="0.018">
      <failure message="Value of: (void*)__null&#x0A;  Actual: NULL&#x0A;Expected: p = dbg_malloc(gh_APP_HEAP, 0, __FUNCTION__, 1527)&#x0A;Which is: 0x87adbd90" type=""><![CDATA[gtest/case/module/test_rtos.cpp:1527<br />
Value of: (void*)__null<br />
  Actual: NULL<br />
Expected: p = dbg_malloc(gh_APP_HEAP, 0, __FUNCTION__, 1527)<br />
Which is: 0x87adbd90]]></failure>
    </testcase>
    <testcase name="TEST_RTOS_MEM5" description="测试小块内存的分配和释放是否成功" status="run" classname="TestRtos" time="0.002"/>
    <testcase name="TEST_RTOS_REALLOC1" description="测试重分配的内存大小小于申请的内存大小的情况能否重分配成功" status="run" classname="TestRtos" time="0.001"/>
    <testcase name="TEST_RTOS_REALLOC2" description="测试重分配的内存大小大于申请的内存大小的情况能否重分配成功" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_REALLOC3" description="测试重分配的内存地址pv_MemAddr等于NULL的情况能否重分配成功" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_GETFREEMEM" description="测试CH_RTOS_GetFreeMemory获取的值是否准确" status="run" classname="TestRtos" time="0.005"/>
    <testcase name="TEST_RTOS_MEMCPY" description="测试CH_RTOS_Memcpy是否成功" status="run" classname="TestRtos" time="0"/>
    <testcase name="TEST_RTOS_TIME1" description="测试CH_RTOS_GetSysTicknow获取的值是否正确" status="run" classname="TestRtos" time="1.001"/>
    <testcase name="TEST_RTOS_TIME2" description="测试CH_RTOS_GetSysTimenow获取的值是否正确" status="run" classname="TestRtos" time="1"/>
    <testcase name="TEST_RTOS_TIME3" description="测试CH_RTOS_GetSysTimenow获取的值是否正确" status="run" classname="TestRtos" time="1"/>
    <testcase name="TEST_RTOS_TIME4" description="测试CH_RTOS_CvtTimeToTick换算是否正确" status="run" classname="TestRtos" time="1"/>
    <testcase name="TEST_RTOS_TIME5" description="测试CH_RTOS_TimeTickCmp是否正确" status="run" classname="TestRtos" time="0.001"/>
    <testcase name="TEST_RTOS_TIME6" description="测试CH_RTOS_TimeCmp是否正确" status="run" classname="TestRtos" time="0.001"/>
    <testcase name="TEST_RTOS_TIME7" description="测试CH_RTOS_TimeTickPlus换算是否正确" status="run" classname="TestRtos" time="1"/>
    <testcase name="TEST_RTOS_TIME8" description="测试CH_RTOS_TimePlus换算是否正确" status="run" classname="TestRtos" time="1"/>
    <testcase name="TEST_RTOS_TIME9" description="测试CH_RTOS_TimeTickMinus换算是否正确" status="run" classname="TestRtos" time="1"/>
    <testcase name="TEST_RTOS_TIME10" description="测试CH_RTOS_TimeMinus换算是否正确" status="run" classname="TestRtos" time="1"/>
  </testsuite>
  <testsuite name="TestComm" tests="17/17" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_COM_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestComm" time="0.031">
      <failure message="Value of: CH_COM_Init()&#x0A;  Actual: 2(0x2)&#x0A;Expected: CH_COM_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_comm.cpp:74<br />
Value of: CH_COM_Init()<br />
  Actual: 2(0x2)<br />
Expected: CH_COM_OK<br />
Which is: 0(0x0)]]></failure>
      <failure message="Value of: CH_COM_Init()&#x0A;  Actual: 2(0x2)&#x0A;Expected: CH_COM_OK&#x0A;Which is: 0(0x0)&#x0A;多次初始化应该返回OK" type=""><![CDATA[gtest/case/module/test_comm.cpp:75<br />
Value of: CH_COM_Init()<br />
  Actual: 2(0x2)<br />
Expected: CH_COM_OK<br />
Which is: 0(0x0)<br />
多次初始化应该返回OK]]></failure>
    </testcase>
    <testcase name="TEST_COM_INIT2" description="测试模块是否可被销毁" status="run" classname="TestComm" time="0.029">
      <failure message="Value of: CH_COM_Term()&#x0A;  Actual: 3(0x3)&#x0A;Expected: CH_COM_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_comm.cpp:80<br />
Value of: CH_COM_Term()<br />
  Actual: 3(0x3)<br />
Expected: CH_COM_OK<br />
Which is: 0(0x0)]]></failure>
      <failure message="Value of: CH_COM_Init()&#x0A;  Actual: 2(0x2)&#x0A;Expected: CH_COM_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_comm.cpp:81<br />
Value of: CH_COM_Init()<br />
  Actual: 2(0x2)<br />
Expected: CH_COM_OK<br />
Which is: 0(0x0)]]></failure>
    </testcase>
    <testcase name="TEST_COM_INIT3" description="测试CH_COM_GetVersion是否成功" status="run" classname="TestComm" time="0.003"/>
    <testcase name="TEST_COM_UTC1" description="测试CH_COM_CmpUtc功能是否正常" status="run" classname="TestComm" time="0.045">
      <failure message="Value of: CH_COM_CmpUtc(&amp;utc1[i], &amp;utc2[i])&#x0A;  Actual: 0(0x0)&#x0A;Expected: result[i]&#x0A;Which is: 1(0x1)&#x0A;test1.结果不对, 正确的应该是:2079-8-4 00:00:01 &gt; 1900-3-1 00:00:01" type=""><![CDATA[gtest/case/module/test_comm.cpp:202<br />
Value of: CH_COM_CmpUtc(&utc1[i], &utc2[i])<br />
  Actual: 0(0x0)<br />
Expected: result[i]<br />
Which is: 1(0x1)<br />
test1.结果不对, 正确的应该是:2079-8-4 00:00:01 > 1900-3-1 00:00:01]]></failure>
      <failure message="Value of: CH_COM_CmpUtc(&amp;utc1[i], &amp;utc2[i])&#x0A;  Actual: -1(0xffffffff)&#x0A;Expected: result[i]&#x0A;Which is: 1(0x1)&#x0A;test3.结果不对, 正确的应该是:2079-5-30 23:00:03 &gt; 2079-5-30 01:00:00" type=""><![CDATA[gtest/case/module/test_comm.cpp:202<br />
Value of: CH_COM_CmpUtc(&utc1[i], &utc2[i])<br />
  Actual: -1(0xffffffff)<br />
Expected: result[i]<br />
Which is: 1(0x1)<br />
test3.结果不对, 正确的应该是:2079-5-30 23:00:03 > 2079-5-30 01:00:00]]></failure>
    </testcase>
    <testcase name="TEST_COM_UTC2" description="测试CH_COM_AddTimeToUtc功能是否正常" status="run" classname="TestComm" time="0.004"/>
    <testcase name="TEST_COM_UTC3" description="测试CH_COM_CalcLocalTime功能是否正常" status="run" classname="TestComm" time="0.004"/>
    <testcase name="TEST_COM_UTC4" description="测试CH_COM_CnvMjdToDate功能是否正常" status="run" classname="TestComm" time="0"/>
    <testcase name="TEST_COM_UTC5" description="测试CH_COM_CnvDateToMjd功能是否正常" status="run" classname="TestComm" time="0"/>
    <testcase name="TEST_COM_UTC6" description="测试CH_COM_CmpUtcInterval功能是否正常" status="run" classname="TestComm" time="0.001"/>
    <testcase name="TEST_COM_UTC7" description="测试CH_COM_SetRTC/CH_COM_GetRTC功能是否正常" status="run" classname="TestComm" time="0"/>
    <testcase name="TEST_COM_UTC8" description="测试CH_COM_CnvBcdToVal功能是否正常" status="run" classname="TestComm" time="0"/>
    <testcase name="TEST_COM_UTC9" description="测试CH_COM_CnvValToBcd功能是否正常" status="run" classname="TestComm" time="0"/>
    <testcase name="TEST_COM_CRC1" description="测试CH_COM_MPEGCRC32功能是否正常" status="run" classname="TestComm" time="0"/>
    <testcase name="TEST_COM_CRC2" description="测试CH_COM_CRC32功能是否正常" status="run" classname="TestComm" time="0"/>
    <testcase name="TEST_COM_CRC3" description="测试CH_COM_CRC16功能是否正常" status="run" classname="TestComm" time="0"/>
    <testcase name="TEST_COM_CODE1" description="测试CH_COM_CodingConvert功能是否正常" status="run" classname="TestComm" time="0"/>
    <testcase name="TEST_COM_CHIPID" description="测试CH_COM_GetChipInfo功能是否正常" status="run" classname="TestComm" time="0.013">
      <failure message="Expected: (stru_Info.ui_ChipID) != (0), actual: 0(0x0) vs 0(0x0)" type=""><![CDATA[gtest/case/module/test_comm.cpp:632<br />
Expected: (stru_Info.ui_ChipID) != (0), actual: 0(0x0) vs 0(0x0)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="TestFlash" tests="28/28" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_FLASH_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_INIT2" description="test flash can be term" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_INIT3" description="test CHDRV_FLASH_GetVersion if ok" status="run" classname="TestFlash" time="0.002"/>
    <testcase name="TEST_FLASH_PARAMS1" description="CHDRV_FLASH_Open错误参数测试" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_PARAMS3" description="CHDRV_FLASH_Read错误参数测试" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_PARAMS4" description="CHDRV_FLASH_Erase错误参数测试" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_PARAMS5" description="CHDRV_FLASH_Write错误参数测试" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_PARAMS6" description="CHDRV_FLASH_DirectWrite错误参数测试" status="run" classname="TestFlash" time="0.01">
      <failure message="Failed&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_flash.cpp:144<br />
Failed<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_FLASH_PARAMS7" description="CHDRV_FLASH_Lock错误参数测试" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_PARAMS8" description="CHDRV_FLASH_UnLock错误参数测试" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_OPEN1" description="CHDRV_FLASH_Open合法的参数是否成功,句柄不为NULL" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_OPEN2" description="CHDRV_FLASH_OpenEx合法的参数是否成功，句柄不为NULL" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_READ1" description="CHDRV_FLASH_Read按BLOCK_SIZE对齐，应返回成功，数据暂存到内存中" status="run" classname="TestFlash" time="0.056"/>
    <testcase name="TEST_FLASH_ERASE1" description="CHDRV_FLASH_Erase按BLOCK_SIZE对齐，应返回成功,依次擦除完全部FLASH_LENGTH_0" status="run" classname="TestFlash" time="123.583"/>
    <testcase name="TEST_FLASH_WRITE1" description="CHDRV_FLASH_Write按BLOCK_SIZE对齐，应返回成功" status="run" classname="TestFlash" time="0.155"/>
    <testcase name="TEST_FLASH_READ2" description="CHDRV_FLASH_Read按BLOCK_SIZE对齐应返回成功的数据一致" status="run" classname="TestFlash" time="0.058"/>
    <testcase name="TEST_FLASH_WRITE2" description="CHDRV_FLASH_DirectWrite按BLOCK_SIZE对齐，应返回成功" status="run" classname="TestFlash" time="0.465"/>
    <testcase name="TEST_FLASH_READ3" description="CHDRV_FLASH_Read按BLOCK_SIZE对齐，应返回成功，读出的数据与写入的数据一致" status="run" classname="TestFlash" time="0.057"/>
    <testcase name="TEST_FLASH_CLOSE1" description="CHDRV_FLASH_Close应返回成功" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_OPEN3" description="测试offset和length不按BLOCK_SIZE对齐，调用CHDRV_FLASH_Open是否成功" status="run" classname="TestFlash" time="0.006"/>
    <testcase name="TEST_FLASH_OPEN4" description="测试offset和length不按BLOCK_SIZE对齐，调用CHDRV_FLASH_OpenEx是否成功" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_ERASE2" description="测试offset和length不按BLOCK_SIZE对齐，调用CHDRV_FLASH_Erase应成功" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_WRITE3" description="测试offset和length不按BLOCK_SIZE对齐，调用CHDRV_FLASH_Write应成功" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_READ4" description="测试offset和length不按BLOCK_SIZE对齐，CHDRV_FLASH_Read应返回成功，读出的数据与写入的数据一致" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_WRITE4" description="测试offset和length不按BLOCK_SIZE对齐，调用CHDRV_FLASH_DirectWrite应成功" status="run" classname="TestFlash" time="0.02">
      <failure message="Value of: CHDRV_FLASH_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_FLASH_DirectWrite(gh_flashHdl, 0+0x10000/4, write_buffer, &amp;i_writeNumber)&#x0A;Which is: 7(0x7)" type=""><![CDATA[gtest/case/module/test_flash.cpp:352<br />
Value of: CHDRV_FLASH_OK<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_FLASH_DirectWrite(gh_flashHdl, 0+0x10000/4, write_buffer, &i_writeNumber)<br />
Which is: 7(0x7)]]></failure>
    </testcase>
    <testcase name="TEST_FLASH_READ5" description="CHDRV_FLASH_Read不按按BLOCK_SIZE对齐，应返回成功，读出的数据与写入的数据一致" status="run" classname="TestFlash" time="0.037">
      <failure message="Value of: CHDRV_FLASH_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_FLASH_Read(gh_flashHdl, 0x10000/4, read_buffer, &amp;i_readNumber)&#x0A;Which is: 7(0x7)" type=""><![CDATA[gtest/case/module/test_flash.cpp:362<br />
Value of: CHDRV_FLASH_OK<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_FLASH_Read(gh_flashHdl, 0x10000/4, read_buffer, &i_readNumber)<br />
Which is: 7(0x7)]]></failure>
      <failure message="Value of: 0&#x0A;  Actual: 0(0x0)&#x0A;Expected: bufferCompare(write_buffer, read_buffer, i_readNumber)&#x0A;Which is: -1(0xffffffff)" type=""><![CDATA[gtest/case/module/test_flash.cpp:363<br />
Value of: 0<br />
  Actual: 0(0x0)<br />
Expected: bufferCompare(write_buffer, read_buffer, i_readNumber)<br />
Which is: -1(0xffffffff)]]></failure>
    </testcase>
    <testcase name="TEST_FLASH_CLOSE2" description="CHDRV_FLASH_Close应返回成功" status="run" classname="TestFlash" time="0"/>
    <testcase name="TEST_FLASH_WRITE5" description="将内存内保存的临时数据写回FLASH，恢复成本测试之前的数据" status="run" classname="TestFlash" time="0.155"/>
  </testsuite>
  <testsuite name="TestRoute" tests="13/13" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_ROUTE_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestRoute" time="0"/>
    <testcase name="TEST_ROUTE_INIT2" description="测试模块是否可被销毁" status="run" classname="TestRoute" time="0"/>
    <testcase name="TEST_ROUTE_INIT3" description="测试CHDRV_ROUTE_GetVersion是否成功" status="run" classname="TestRoute" time="0.003"/>
    <testcase name="TEST_ROUTE_CREATE1" description="测试错误参数能否创建ROUTE成功" status="run" classname="TestRoute" time="0.012"/>
    <testcase name="TEST_ROUTE_CREATE2" description="测试正常参数能否创建ROUTE成功,分别创建LIVE/PLAYBACK/RECORD类型的route各一个" status="run" classname="TestRoute" time="0.064">
      <failure message="Value of: CHDRV_ROUTE_Create(&amp;stru_Param, &amp;h_RouteHandle)&#x0A;  Actual: 8(0x8)&#x0A;Expected: CHDRV_ROUTE_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_route.cpp:116<br />
Value of: CHDRV_ROUTE_Create(&stru_Param, &h_RouteHandle)<br />
  Actual: 8(0x8)<br />
Expected: CHDRV_ROUTE_OK<br />
Which is: 0(0x0)]]></failure>
      <failure message="Value of: CHDRV_ROUTE_Create(&amp;stru_Param, &amp;h_RouteHandle)&#x0A;  Actual: 8(0x8)&#x0A;Expected: CHDRV_ROUTE_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_route.cpp:123<br />
Value of: CHDRV_ROUTE_Create(&stru_Param, &h_RouteHandle)<br />
  Actual: 8(0x8)<br />
Expected: CHDRV_ROUTE_OK<br />
Which is: 0(0x0)]]></failure>
    </testcase>
    <testcase name="TEST_ROUTE_GETDEVICE_INFO1" description="测试能否得到正常的设备信息" status="run" classname="TestRoute" time="0.035"/>
    <testcase name="TEST_ROUTE_GET_TUNER" description="能够得到正确的相应tuenr handle，不为NULL" status="run" classname="TestRoute" time="0"/>
    <testcase name="TEST_ROUTE_GET_DEMUX" description="能够得到正确的相应demux id" status="run" classname="TestRoute" time="0"/>
    <testcase name="TEST_ROUTE_GET_FILTER" description="能够得到正确的相应filter handle，不为NULL" status="run" classname="TestRoute" time="0"/>
    <testcase name="TEST_ROUTE_GET_VDECODER" description="能够得到正确的相应vdecoder handle，不为NULL" status="run" classname="TestRoute" time="0"/>
    <testcase name="TEST_ROUTE_GET_ADECODER" description="能够得到正确的相应audio handle，不为NULL" status="run" classname="TestRoute" time="0"/>
    <testcase name="TEST_ROUTE_GET_VWIN" description="能够得到正确的相应vwindow handle，不为NULL" status="run" classname="TestRoute" time="0.001"/>
    <testcase name="TEST_ROUTE_DESTROY" description="测试Destroy能否成功" status="run" classname="TestRoute" time="0.023"/>
  </testsuite>
  <testsuite name="TestTuner" tests="21/21" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_TUNER_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestTuner" time="0.032">
      <failure message="Value of: CHDRV_TUNER_Init()&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_TUNER_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_tuner.cpp:117<br />
Value of: CHDRV_TUNER_Init()<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_TUNER_OK<br />
Which is: 0(0x0)]]></failure>
      <failure message="Value of: CHDRV_TUNER_Init()&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_TUNER_OK&#x0A;Which is: 0(0x0)&#x0A;多次初始化应该返回OK" type=""><![CDATA[gtest/case/module/test_tuner.cpp:118<br />
Value of: CHDRV_TUNER_Init()<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_TUNER_OK<br />
Which is: 0(0x0)<br />
多次初始化应该返回OK]]></failure>
    </testcase>
    <testcase name="TEST_TUNER_INIT2" description="测试模块是否可被销毁" status="run" classname="TestTuner" time="0.171"/>
    <testcase name="TEST_TUNER_INIT3" description="测试CHDRV_TUNER_GetVersion是否成功" status="run" classname="TestTuner" time="0.003"/>
    <testcase name="TEST_TUNER_FUNC_1" description="注册3个不同的回调函数，是否均返回成功" status="run" classname="TestTuner" time="0"/>
    <testcase name="TEST_TUNER_FUNC_2" description="提示测试员按照给定参数搭建好测试环境，并以指定参数调用CHDRV_TUNER_QAM_SetIF，应返回成功；" status="run" classname="TestTuner" time="0.003"/>
    <testcase name="TEST_TUNER_FUNC_3" description="提示测试员按照给定参数搭建好测试环境，并以指定参数调用CHDRV_TUNER_COFDM_SetIF，应返回成功测试调用CHDRV_TUNER_COFDM_GetCarrierParams，获取的参数应与设置的一致" status="run" classname="TestTuner" time="1.881"/>
    <testcase name="TEST_TUNER_FUNC_4" description="提示测试员按照给定参数搭建好测试环境，并以指定参数调用CHDRV_TUNER_QPSK_SetIF，应返回成功；测试调用CHDRV_TUNER_QPSK_GetCarrierParams，获取的参数应与设置的一致" status="run" classname="TestTuner" time="0.004"/>
    <testcase name="TEST_TUNER_FUNC_5" description="测试CHDRV_TUNER_Set22KhzTone，应返回OK" status="run" classname="TestTuner" time="0.002"/>
    <testcase name="TEST_TUNER_FUNC_6" description="测试CHDRV_TUNER_Set12VOut，应返回ok" status="run" classname="TestTuner" time="0.002"/>
    <testcase name="TEST_TUNER_FUNC_7" description="测试CHDRV_TUNER_SetLNBVoltage，应返回ok" status="run" classname="TestTuner" time="0.002"/>
    <testcase name="TEST_TUNER_FUNC_8" description="测试CHDRV_TUNER_InstallBlindSearchCallback，注册回调函数，应返回成功" status="run" classname="TestTuner" time="0.002"/>
    <testcase name="TEST_TUNER_FUNC_9" description="测试CHDRV_TUNER_BlindSearch，应成功，并从callback里获取到搜索进度和状态&#x09;" status="run" classname="TestTuner" time="0.002"/>
    <testcase name="TEST_TUNER_FUNC_10" description="申请一个pat表格，等待6S，应能持续不断地收到pat数据" status="run" classname="TestTuner" time="0.301"/>
    <testcase name="TEST_TUNER_FUNC_11" description="调用CHDRV_TUNER_GetLockStatus应成功，状态为锁定;调用CHDRV_TUNER_GetErrorRate应成功，误码率小于100000" status="run" classname="TestTuner" time="0"/>
    <testcase name="TEST_TUNER_FUNC_12" description="调用CHDRV_TUNER_GetSNR，snr范围0~50;调用CHDRV_TUNER_GetQuality，quality范围为0~100" status="run" classname="TestTuner" time="0.012">
      <failure message="Expected: (0) &lt; (snr), actual: 0(0x0) vs 0(0x0)" type=""><![CDATA[gtest/case/module/test_tuner.cpp:394<br />
Expected: (0) < (snr), actual: 0(0x0) vs 0(0x0)]]></failure>
    </testcase>
    <testcase name="TEST_TUNER_FUNC_13" description="调用CHDRV_TUNER_GetStrengthDB，db范围为0~100 调用CHDRV_TUNER_GetStrengthPercent，percent范围为0~100" status="run" classname="TestTuner" time="0"/>
    <testcase name="TEST_TUNER_FUNC_14" description="调用CHDRV_TUNER_Break，应返回OK 注册的3个回调函数均收到锁定状态改变的通知" status="run" classname="TestTuner" time="1.045">
      <failure message="Expected: (temp_lock0) != (LockCount0), actual: &apos;\0&apos; vs &apos;\0&apos;&#x0A;CHDRV_TUNER_Break未正确实现" type=""><![CDATA[gtest/case/module/test_tuner.cpp:421<br />
Expected: (temp_lock0) != (LockCount0), actual: '\0' vs '\0'<br />
CHDRV_TUNER_Break未正确实现]]></failure>
      <failure message="Expected: (temp_lock1) != (LockCount1), actual: &apos;\0&apos; vs &apos;\0&apos;&#x0A;CHDRV_TUNER_Break未正确实现" type=""><![CDATA[gtest/case/module/test_tuner.cpp:422<br />
Expected: (temp_lock1) != (LockCount1), actual: '\0' vs '\0'<br />
CHDRV_TUNER_Break未正确实现]]></failure>
      <failure message="Expected: (temp_lock2) != (LockCount2), actual: &apos;\0&apos; vs &apos;\0&apos;&#x0A;CHDRV_TUNER_Break未正确实现" type=""><![CDATA[gtest/case/module/test_tuner.cpp:423<br />
Expected: (temp_lock2) != (LockCount2), actual: '\0' vs '\0'<br />
CHDRV_TUNER_Break未正确实现]]></failure>
    </testcase>
    <testcase name="TEST_TUNER_FUNC_15" description="调用CHDRV_TUNER_GetLockStatus应成功，状态为未锁定   申请一个pat表格，等待6S，应不再收到数据" status="run" classname="TestTuner" time="0.031">
      <failure message="Value of: lock&#x0A;  Actual: 1(0x1)&#x0A;Expected: 0&#x0A;Which is: 0(0x0)&#x0A;CHDRV_TUNER_Break未正确实现" type=""><![CDATA[gtest/case/module/test_tuner.cpp:432<br />
Value of: lock<br />
  Actual: 1(0x1)<br />
Expected: 0<br />
Which is: 0(0x0)<br />
CHDRV_TUNER_Break未正确实现]]></failure>
      <failure message="Value of: Datecoming&#x0A;  Actual: &apos;\x1&apos; (1)&#x0A;Expected: 0&#x0A;Which is: 0(0x0)&#x0A;CHDRV_TUNER_Break未正确实现" type=""><![CDATA[gtest/case/module/test_tuner.cpp:433<br />
Value of: Datecoming<br />
  Actual: '\x1' (1)<br />
Expected: 0<br />
Which is: 0(0x0)<br />
CHDRV_TUNER_Break未正确实现]]></failure>
    </testcase>
    <testcase name="TEST_TUNER_FUNC_16" description="调用CHDRV_TUNER_GetErrorRate应成功，误码率为1000000000调用CHDRV_TUNER_GetSNR，snr范围0" status="run" classname="TestTuner" time="0.019">
      <failure message="Value of: rate&#x0A;  Actual: -1000000000(0xc4653600)&#x0A;Expected: 1000000000&#x0A;Which is: 1000000000(0x3b9aca00)&#x0A;CHDRV_TUNER_Break未正确实现" type=""><![CDATA[gtest/case/module/test_tuner.cpp:442<br />
Value of: rate<br />
  Actual: -1000000000(0xc4653600)<br />
Expected: 1000000000<br />
Which is: 1000000000(0x3b9aca00)<br />
CHDRV_TUNER_Break未正确实现]]></failure>
    </testcase>
    <testcase name="TEST_TUNER_FUNC_17" description="调用CHDRV_TUNER_GetQuality，quality范围为0调用CHDRV_TUNER_GetStrengthDB，db范围为0~100 调用CHDRV_TUNER_GetStrengthPercent，percent范围为0~100" status="run" classname="TestTuner" time="0.017">
      <failure message="Value of: quality&#x0A;  Actual: &apos;!&apos; (33, 0x21)&#x0A;Expected: 0&#x0A;Which is: 0(0x0)&#x0A;CHDRV_TUNER_Break未正确实现" type=""><![CDATA[gtest/case/module/test_tuner.cpp:452<br />
Value of: quality<br />
  Actual: '!' (33, 0x21)<br />
Expected: 0<br />
Which is: 0(0x0)<br />
CHDRV_TUNER_Break未正确实现]]></failure>
    </testcase>
    <testcase name="TEST_TUNER_FUNC_18" description="调用CHDRV_TUNER_UninstallCallBack，删除已注册的回调函数" status="run" classname="TestTuner" time="0"/>
  </testsuite>
  <testsuite name="TestOsd" tests="183/183" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_OSD_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_INIT2" description="测试模块是否可被销毁" status="run" classname="TestOsd" time="0.04"/>
    <testcase name="TEST_OSD_INIT3" description="测试CHDRV_OSD_GetVersion是否成功" status="run" classname="TestOsd" time="0.042"/>
    <testcase name="TEST_OSD_DELAY" description="观看视频播放情况" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_PARAMS1" description="CHDRV_OSD_AddToMemBitMap错误参数测试" status="run" classname="TestOsd" time="0.04"/>
    <testcase name="TEST_OSD_PARAMS2" description="CHDRV_OSD_AllocateMemory错误参数测试" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_PARAMS3" description="CHDRV_OSD_BitBlit错误参数测试" status="run" classname="TestOsd" time="0.06">
      <failure message="Value of: CHDRV_OSD_BitBlit( ((void *)0x87650000), ((void *)0x87650000), __null)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:502<br />
Value of: CHDRV_OSD_BitBlit( ((void *)0x87650000), ((void *)0x87650000), __null)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS4" description="CHDRV_OSD_BufBitBlit错误参数测试" status="run" classname="TestOsd" time="0.062">
      <failure message="Value of: CHDRV_OSD_BufBitBlit(((void *)0x87650000),(200), (200), ((void *)0x87650000),(200), (200),__null)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:521<br />
Value of: CHDRV_OSD_BufBitBlit(((void *)0x87650000),(200), (200), ((void *)0x87650000),(200), (200),__null)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS5" description="CHDRV_OSD_CheckRegionNum错误参数测试" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_PARAMS6" description="CHDRV_OSD_ClearArea错误参数测试" status="run" classname="TestOsd" time="0.04"/>
    <testcase name="TEST_OSD_PARAMS7" description="CHDRV_OSD_ClearFullRegion错误参数测试" status="run" classname="TestOsd" time="0.058">
      <failure message="Value of: CHDRV_OSD_ClearFullRegion(((void *)0x87650129),0)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:555<br />
Value of: CHDRV_OSD_ClearFullRegion(((void *)0x87650129),0)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS8" description="CHDRV_OSD_CopyRect错误参数测试" status="run" classname="TestOsd" time="0.084">
      <failure message="Value of: CHDRV_OSD_CopyRect(((void *)0x87650129),((void *)0x87650000),(200),(200),(200),(200),(200),(200))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:564<br />
Value of: CHDRV_OSD_CopyRect(((void *)0x87650129),((void *)0x87650000),(200),(200),(200),(200),(200),(200))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_CopyRect(((void *)0x87650000),((void *)0x87650129),(200),(200),(200),(200),(200),(200))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:566<br />
Value of: CHDRV_OSD_CopyRect(((void *)0x87650000),((void *)0x87650129),(200),(200),(200),(200),(200),(200))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS9" description="CHDRV_OSD_CreateGIFDecoder错误参数测试" status="run" classname="TestOsd" time="0.04"/>
    <testcase name="TEST_OSD_PARAMS10" description="CHDRV_OSD_CreateRegion错误参数测试" status="run" classname="TestOsd" time="0.084">
      <failure message="Value of: CHDRV_OSD_CreateRegion(&amp;rstru_Params, &amp;rh_Region)&#x0A;  Actual: 6(0x6)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:631<br />
Value of: CHDRV_OSD_CreateRegion(&rstru_Params, &rh_Region)<br />
  Actual: 6(0x6)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS11" description="CHDRV_OSD_CreateScrollRegion错误参数测试" status="run" classname="TestOsd" time="0.144">
      <failure message="Value of: CHDRV_OSD_CreateScrollRegion(((void *)0x87650129),stru_Rect,&amp;rh_ScrollRegion)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:645<br />
Value of: CHDRV_OSD_CreateScrollRegion(((void *)0x87650129),stru_Rect,&rh_ScrollRegion)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_CreateScrollRegion(((void *)0x87650000),stru_Rect,&amp;rh_ScrollRegion)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:648<br />
Value of: CHDRV_OSD_CreateScrollRegion(((void *)0x87650000),stru_Rect,&rh_ScrollRegion)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_CreateScrollRegion(((void *)0x87650000),stru_Rect,&amp;rh_ScrollRegion)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:651<br />
Value of: CHDRV_OSD_CreateScrollRegion(((void *)0x87650000),stru_Rect,&rh_ScrollRegion)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_CreateScrollRegion(((void *)0x87650000),stru_Rect,&amp;rh_ScrollRegion)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:654<br />
Value of: CHDRV_OSD_CreateScrollRegion(((void *)0x87650000),stru_Rect,&rh_ScrollRegion)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_CreateScrollRegion(((void *)0x87650000),stru_Rect,&amp;rh_ScrollRegion)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:657<br />
Value of: CHDRV_OSD_CreateScrollRegion(((void *)0x87650000),stru_Rect,&rh_ScrollRegion)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS12" description="CHDRV_OSD_DecodeImage错误参数测试" status="run" classname="TestOsd" time="0.04"/>
    <testcase name="TEST_OSD_PARAMS13" description="CHDRV_OSD_DeleteRegion错误参数测试" status="run" classname="TestOsd" time="0.066">
      <failure message="Value of: CHDRV_OSD_DeleteRegion(((void *)0x87650129))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:685<br />
Value of: CHDRV_OSD_DeleteRegion(((void *)0x87650129))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS14" description="CHDRV_OSD_DestroyGIFDecoder错误参数测试" status="run" classname="TestOsd" time="0.056">
      <failure message="Value of: CHDRV_OSD_DestroyGIFDecoder((17))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:691<br />
Value of: CHDRV_OSD_DestroyGIFDecoder((17))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS15" description="CHDRV_OSD_DestroyScrollRegion错误参数测试" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_PARAMS16" description="CHDRV_OSD_DisableBootLogo错误参数测试" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_PARAMS17" description="CHDRV_OSD_DrawHLine错误参数测试" status="run" classname="TestOsd" time="0.098">
      <failure message="Value of: CHDRV_OSD_DrawHLine(((void *)0x87650000),(-1),(200),(200),(200),(200),CHDRV_OSD_COLOR_TYPE_MAX,0,CHDRV_OSD_ALU_MAX)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:716<br />
Value of: CHDRV_OSD_DrawHLine(((void *)0x87650000),(-1),(200),(200),(200),(200),CHDRV_OSD_COLOR_TYPE_MAX,0,CHDRV_OSD_ALU_MAX)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_DrawHLine(((void *)0x87650000),(200),(-1),(200),(200),(200),CHDRV_OSD_COLOR_TYPE_MAX,0,CHDRV_OSD_ALU_MAX)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:718<br />
Value of: CHDRV_OSD_DrawHLine(((void *)0x87650000),(200),(-1),(200),(200),(200),CHDRV_OSD_COLOR_TYPE_MAX,0,CHDRV_OSD_ALU_MAX)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS18" description="CHDRV_OSD_DrawLine错误参数测试" status="run" classname="TestOsd" time="0.062">
      <failure message="Value of: CHDRV_OSD_DrawLine(((void *)0x87650129),(200),(200),(200),(200),(200),0,CHDRV_OSD_ALU_MAX)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:733<br />
Value of: CHDRV_OSD_DrawLine(((void *)0x87650129),(200),(200),(200),(200),(200),0,CHDRV_OSD_ALU_MAX)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS19" description="CHDRV_OSD_DrawRect错误参数测试" status="run" classname="TestOsd" time="0.094">
      <failure message="Value of: CHDRV_OSD_DrawRect(((void *)0x87650000),0,(200),&amp;stru_Rect,CHDRV_OSD_COLOR_TYPE_MAX,(1),0,0)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:747<br />
Value of: CHDRV_OSD_DrawRect(((void *)0x87650000),0,(200),&stru_Rect,CHDRV_OSD_COLOR_TYPE_MAX,(1),0,0)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_DrawRect(((void *)0x87650000),(200),0,&amp;stru_Rect,CHDRV_OSD_COLOR_TYPE_MAX,(1),0,0)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:748<br />
Value of: CHDRV_OSD_DrawRect(((void *)0x87650000),(200),0,&stru_Rect,CHDRV_OSD_COLOR_TYPE_MAX,(1),0,0)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS20" description="CHDRV_OSD_DrawVLine错误参数测试" status="run" classname="TestOsd" time="0.069">
      <failure message="Value of: CHDRV_OSD_DrawVLine(((void *)0x87650000),(200),(200),(200),(200),(-1),CHDRV_OSD_COLOR_TYPE_MAX,0,CHDRV_OSD_ALU_MAX)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:772<br />
Value of: CHDRV_OSD_DrawVLine(((void *)0x87650000),(200),(200),(200),(200),(-1),CHDRV_OSD_COLOR_TYPE_MAX,0,CHDRV_OSD_ALU_MAX)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS21" description="CHDRV_OSD_FreeMemory错误参数测试" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_PARAMS22" description="CHDRV_OSD_GetAreaData错误参数测试" status="run" classname="TestOsd" time="0.061">
      <failure message="Value of: CHDRV_OSD_GetAreaData(((void *)0x87650129),(200),(200),(200),(200),&amp;ruc_Data)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:791<br />
Value of: CHDRV_OSD_GetAreaData(((void *)0x87650129),(200),(200),(200),(200),&ruc_Data)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS23" description="CHDRV_OSD_GetBitMapByMem错误参数测试" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_PARAMS24" description="CHDRV_OSD_GetDisplayRegionAttrib错误参数测试" status="run" classname="TestOsd" time="0.061">
      <failure message="Value of: CHDRV_OSD_GetDisplayRegionAttrib(((void *)0x87650129),&amp;rstru_RegionAttrib,0)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:819<br />
Value of: CHDRV_OSD_GetDisplayRegionAttrib(((void *)0x87650129),&rstru_RegionAttrib,0)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS25" description="CHDRV_OSD_GetEncodeFormat错误参数测试" status="run" classname="TestOsd" time="0.078">
      <failure message="Value of: CHDRV_OSD_GetEncodeFormat(((void *)0x87650129),&amp;renm_EncFmt)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:830<br />
Value of: CHDRV_OSD_GetEncodeFormat(((void *)0x87650129),&renm_EncFmt)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_GetEncodeFormat(((void *)0x87650000),__null)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:831<br />
Value of: CHDRV_OSD_GetEncodeFormat(((void *)0x87650000),__null)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS27" description="CHDRV_OSD_GetImageInfo错误参数测试" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_PARAMS28" description="CHDRV_OSD_GetOsdInfo错误参数测试" status="run" classname="TestOsd" time="0.262">
      <failure message="Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650129),r_TAddressSet,r_BAddressSet,&amp;ri_PosX,&amp;ri_PosY,&amp;ri_Width,&amp;ri_Height,&amp;rb_Interlace,&amp;rpenm_ClutColorType,&amp;rpenm_ColorType)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:869<br />
Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650129),r_TAddressSet,r_BAddressSet,&ri_PosX,&ri_PosY,&ri_Width,&ri_Height,&rb_Interlace,&rpenm_ClutColorType,&rpenm_ColorType)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650000),__null,r_BAddressSet,&amp;ri_PosX,&amp;ri_PosY,&amp;ri_Width,&amp;ri_Height,&amp;rb_Interlace,&amp;rpenm_ClutColorType,&amp;rpenm_ColorType)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:870<br />
Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650000),__null,r_BAddressSet,&ri_PosX,&ri_PosY,&ri_Width,&ri_Height,&rb_Interlace,&rpenm_ClutColorType,&rpenm_ColorType)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650000),r_TAddressSet,__null,&amp;ri_PosX,&amp;ri_PosY,&amp;ri_Width,&amp;ri_Height,&amp;rb_Interlace,&amp;rpenm_ClutColorType,&amp;rpenm_ColorType)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:871<br />
Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650000),r_TAddressSet,__null,&ri_PosX,&ri_PosY,&ri_Width,&ri_Height,&rb_Interlace,&rpenm_ClutColorType,&rpenm_ColorType)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650000),r_TAddressSet,r_BAddressSet,__null,&amp;ri_PosY,&amp;ri_Width,&amp;ri_Height,&amp;rb_Interlace,&amp;rpenm_ClutColorType,&amp;rpenm_ColorType)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:872<br />
Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650000),r_TAddressSet,r_BAddressSet,__null,&ri_PosY,&ri_Width,&ri_Height,&rb_Interlace,&rpenm_ClutColorType,&rpenm_ColorType)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650000),r_TAddressSet,r_BAddressSet,&amp;ri_PosX,__null,&amp;ri_Width,&amp;ri_Height,&amp;rb_Interlace,&amp;rpenm_ClutColorType,&amp;rpenm_ColorType)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:873<br />
Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650000),r_TAddressSet,r_BAddressSet,&ri_PosX,__null,&ri_Width,&ri_Height,&rb_Interlace,&rpenm_ClutColorType,&rpenm_ColorType)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650000),r_TAddressSet,r_BAddressSet,&amp;ri_PosX,&amp;ri_PosY,__null,&amp;ri_Height,&amp;rb_Interlace,&amp;rpenm_ClutColorType,&amp;rpenm_ColorType)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:874<br />
Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650000),r_TAddressSet,r_BAddressSet,&ri_PosX,&ri_PosY,__null,&ri_Height,&rb_Interlace,&rpenm_ClutColorType,&rpenm_ColorType)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650000),r_TAddressSet,r_BAddressSet,&amp;ri_PosX,&amp;ri_PosY,&amp;ri_Width,__null,&amp;rb_Interlace,&amp;rpenm_ClutColorType,&amp;rpenm_ColorType)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:875<br />
Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650000),r_TAddressSet,r_BAddressSet,&ri_PosX,&ri_PosY,&ri_Width,__null,&rb_Interlace,&rpenm_ClutColorType,&rpenm_ColorType)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650000),r_TAddressSet,r_BAddressSet,&amp;ri_PosX,&amp;ri_PosY,&amp;ri_Width,&amp;ri_Height,__null,&amp;rpenm_ClutColorType,&amp;rpenm_ColorType)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:876<br />
Value of: CHDRV_OSD_GetOsdInfo(((void *)0x87650000),r_TAddressSet,r_BAddressSet,&ri_PosX,&ri_PosY,&ri_Width,&ri_Height,__null,&rpenm_ClutColorType,&rpenm_ColorType)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS29" description="CHDRV_OSD_GetPixel错误参数测试" status="run" classname="TestOsd" time="0.058">
      <failure message="Value of: CHDRV_OSD_GetPixel(((void *)0x87650129),(200),(200),&amp;ui_Color)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:885<br />
Value of: CHDRV_OSD_GetPixel(((void *)0x87650129),(200),(200),&ui_Color)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS30" description="CHDRV_OSD_GetRegionAlpha错误参数测试" status="run" classname="TestOsd" time="0.059">
      <failure message="Value of: CHDRV_OSD_GetRegionAlpha(((void *)0x87650129),&amp;ri_AlphaValue)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:898<br />
Value of: CHDRV_OSD_GetRegionAlpha(((void *)0x87650129),&ri_AlphaValue)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS31" description="CHDRV_OSD_GetRegionAttrib错误参数测试" status="run" classname="TestOsd" time="0.059">
      <failure message="Value of: CHDRV_OSD_GetRegionAttrib(((void *)0x87650129),&amp;rstru_RegionAttrib)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:907<br />
Value of: CHDRV_OSD_GetRegionAttrib(((void *)0x87650129),&rstru_RegionAttrib)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS32" description="CHDRV_OSD_GetRegionPalette错误参数测试" status="run" classname="TestOsd" time="0.084">
      <failure message="Value of: CHDRV_OSD_GetRegionPalette(((void *)0x87650129),&amp;ui_ColorArray)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:918<br />
Value of: CHDRV_OSD_GetRegionPalette(((void *)0x87650129),&ui_ColorArray)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_GetRegionPalette(((void *)0x87650000),__null)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:919<br />
Value of: CHDRV_OSD_GetRegionPalette(((void *)0x87650000),__null)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS33" description="CHDRV_OSD_GetRegionPaletteEntry错误参数测试" status="run" classname="TestOsd" time="0.059">
      <failure message="Value of: CHDRV_OSD_GetRegionPaletteEntry(((void *)0x87650129),0,&amp;ui_Color)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:928<br />
Value of: CHDRV_OSD_GetRegionPaletteEntry(((void *)0x87650129),0,&ui_Color)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS34" description="CHDRV_OSD_GetVersion错误参数测试" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_PARAMS35" description="CHDRV_OSD_GetWindow错误参数测试" status="run" classname="TestOsd" time="0.077">
      <failure message="Value of: CHDRV_OSD_GetWindow(((void *)0x87650129),&amp;stru_Rect)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:943<br />
Value of: CHDRV_OSD_GetWindow(((void *)0x87650129),&stru_Rect)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_GetWindow(((void *)0x87650000),__null)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:944<br />
Value of: CHDRV_OSD_GetWindow(((void *)0x87650000),__null)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS36" description="CHDRV_OSD_HideRegion错误参数测试" status="run" classname="TestOsd" time="0.066">
      <failure message="Value of: CHDRV_OSD_HideRegion(((void *)0x87650129))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:951<br />
Value of: CHDRV_OSD_HideRegion(((void *)0x87650129))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS37" description="CHDRV_OSD_HideStillImage错误参数测试" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_PARAMS38" description="CHDRV_OSD_IsDisableBootLogoInApp错误参数测试" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_PARAMS39" description="CHDRV_OSD_IsStillImage错误参数测试" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_PARAMS40" description="CHDRV_OSD_LinkRegion错误参数测试" status="run" classname="TestOsd" time="0.096">
      <failure message="Value of: CHDRV_OSD_LinkRegion(((void *)0x87650129),((void *)0x87650000))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:980<br />
Value of: CHDRV_OSD_LinkRegion(((void *)0x87650129),((void *)0x87650000))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_LinkRegion(((void *)0x87650000),((void *)0x87650129))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:982<br />
Value of: CHDRV_OSD_LinkRegion(((void *)0x87650000),((void *)0x87650129))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS41" description="CHDRV_OSD_PutAreaData错误参数测试" status="run" classname="TestOsd" time="0.061">
      <failure message="Value of: CHDRV_OSD_PutAreaData(((void *)0x87650129),(200),(200),(200),(200),&amp;ruc_Data)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:992<br />
Value of: CHDRV_OSD_PutAreaData(((void *)0x87650129),(200),(200),(200),(200),&ruc_Data)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS42" description="CHDRV_OSD_ReCreateRegion错误参数测试" status="run" classname="TestOsd" time="0.056">
      <failure message="Value of: CHDRV_OSD_ReCreateRegion(0)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1007<br />
Value of: CHDRV_OSD_ReCreateRegion(0)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS43" description="CHDRV_OSD_SetAlphaReverse错误参数测试" status="run" classname="TestOsd" time="0.058">
      <failure message="Value of: CHDRV_OSD_SetAlphaReverse(((void *)0x87650129),(1))&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1014<br />
Value of: CHDRV_OSD_SetAlphaReverse(((void *)0x87650129),(1))<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS44" description="CHDRV_OSD_SetEncodeFormat错误参数测试" status="run" classname="TestOsd" time="0.06">
      <failure message="Value of: CHDRV_OSD_SetEncodeFormat(((void *)0x87650129),CHDRV_OSD_ENC_FORMAT_MONO)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1021<br />
Value of: CHDRV_OSD_SetEncodeFormat(((void *)0x87650129),CHDRV_OSD_ENC_FORMAT_MONO)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS45" description="CHDRV_OSD_SetFlushType错误参数测试" status="run" classname="TestOsd" time="0.056">
      <failure message="Value of: CHDRV_OSD_SetFlushType(0)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1027<br />
Value of: CHDRV_OSD_SetFlushType(0)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS46" description="CHDRV_OSD_SetFullScreenSize错误参数测试" status="run" classname="TestOsd" time="0.04"/>
    <testcase name="TEST_OSD_PARAMS47" description="CHDRV_OSD_SetPixel错误参数测试" status="run" classname="TestOsd" time="0.06">
      <failure message="Value of: CHDRV_OSD_SetPixel(((void *)0x87650129),(200),(200),0,CHDRV_OSD_ALU_MAX)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1045<br />
Value of: CHDRV_OSD_SetPixel(((void *)0x87650129),(200),(200),0,CHDRV_OSD_ALU_MAX)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS48" description="CHDRV_OSD_SetRegionAlpha错误参数测试" status="run" classname="TestOsd" time="0.058">
      <failure message="Value of: CHDRV_OSD_SetRegionAlpha(((void *)0x87650129),0)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1056<br />
Value of: CHDRV_OSD_SetRegionAlpha(((void *)0x87650129),0)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS49" description="CHDRV_OSD_SetRegionPalette错误参数测试" status="run" classname="TestOsd" time="0.085">
      <failure message="Value of: CHDRV_OSD_SetRegionPalette(((void *)0x87650129),&amp;rp_ColorArray)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1064<br />
Value of: CHDRV_OSD_SetRegionPalette(((void *)0x87650129),&rp_ColorArray)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_SetRegionPalette(((void *)0x87650000),__null)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1065<br />
Value of: CHDRV_OSD_SetRegionPalette(((void *)0x87650000),__null)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS50" description="CHDRV_OSD_SetRegionPaletteEntry错误参数测试" status="run" classname="TestOsd" time="0.059">
      <failure message="Value of: CHDRV_OSD_SetRegionPaletteEntry(((void *)0x87650129),0,0)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1072<br />
Value of: CHDRV_OSD_SetRegionPaletteEntry(((void *)0x87650129),0,0)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS51" description="CHDRV_OSD_SetWindow错误参数测试" status="run" classname="TestOsd" time="0.058">
      <failure message="Value of: CHDRV_OSD_SetWindow(((void *)0x87650129),stru_Rect)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1081<br />
Value of: CHDRV_OSD_SetWindow(((void *)0x87650129),stru_Rect)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS52" description="CHDRV_OSD_ShowRegion错误参数测试" status="run" classname="TestOsd" time="0.065">
      <failure message="Value of: CHDRV_OSD_ShowRegion(((void *)0x87650129))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1100<br />
Value of: CHDRV_OSD_ShowRegion(((void *)0x87650129))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS53" description="CHDRV_OSD_ShowStillImage错误参数测试" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_PARAMS54" description="CHDRV_OSD_Shutdown错误参数测试" status="run" classname="TestOsd" time="0.04"/>
    <testcase name="TEST_OSD_PARAMS55" description="CHDRV_OSD_StillImage错误参数测试" status="run" classname="TestOsd" time="0.039"/>
    <testcase name="TEST_OSD_PARAMS56" description="CHDRV_OSD_UnlinkRegion错误参数测试" status="run" classname="TestOsd" time="0.098">
      <failure message="Value of: CHDRV_OSD_UnlinkRegion(((void *)0x87650129),((void *)0x87650000))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1129<br />
Value of: CHDRV_OSD_UnlinkRegion(((void *)0x87650129),((void *)0x87650000))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_UnlinkRegion(((void *)0x87650000),((void *)0x87650129))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1131<br />
Value of: CHDRV_OSD_UnlinkRegion(((void *)0x87650000),((void *)0x87650129))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS57" description="CHDRV_OSD_UpdateRegion错误参数测试" status="run" classname="TestOsd" time="0.057">
      <failure message="Value of: CHDRV_OSD_UpdateRegion(((void *)0x87650129))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1137<br />
Value of: CHDRV_OSD_UpdateRegion(((void *)0x87650129))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS58" description="CHDRV_OSD_UpdateRegionArea错误参数测试" status="run" classname="TestOsd" time="0.141">
      <failure message="Value of: CHDRV_OSD_UpdateRegionArea(((void *)0x87650129),(200),(200),(200),(200))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1143<br />
Value of: CHDRV_OSD_UpdateRegionArea(((void *)0x87650129),(200),(200),(200),(200))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_UpdateRegionArea(((void *)0x87650000),(-1),(200),(200),(200))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1144<br />
Value of: CHDRV_OSD_UpdateRegionArea(((void *)0x87650000),(-1),(200),(200),(200))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_UpdateRegionArea(((void *)0x87650000),(200),(-1),(200),(200))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1146<br />
Value of: CHDRV_OSD_UpdateRegionArea(((void *)0x87650000),(200),(-1),(200),(200))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_UpdateRegionArea(((void *)0x87650000),(200),(200),0,(200))&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1148<br />
Value of: CHDRV_OSD_UpdateRegionArea(((void *)0x87650000),(200),(200),0,(200))<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
      <failure message="Value of: CHDRV_OSD_UpdateRegionArea(((void *)0x87650000),(200),(200),(200),0)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1150<br />
Value of: CHDRV_OSD_UpdateRegionArea(((void *)0x87650000),(200),(200),(200),0)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PARAMS59" description="CHDRV_OSD_UpdateScrollRegion错误参数测试" status="run" classname="TestOsd" time="0.058">
      <failure message="Value of: CHDRV_OSD_UpdateScrollRegion(((void *)0x87650129))&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_OSD_INVALID_PARAM&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1158<br />
Value of: CHDRV_OSD_UpdateScrollRegion(((void *)0x87650129))<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_OSD_INVALID_PARAM<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_CREATE_1" description="以合法参数创建一个osd1 draw region，其中宽高从env获取，颜色格式为4444，应返回成功" status="run" classname="TestOsd" time="0.253"/>
    <testcase name="TEST_OSD_CREATE_2" description="以合法参数创建一个osd1 display region，其中宽高从env获取，颜色格式为4444，应返回成功" status="run" classname="TestOsd" time="0.045"/>
    <testcase name="TEST_OSD_GET_ATTRIB_1" description="针对刚刚创建的2个region，分别调用get attrib，应返回成功；属性值应正确" status="run" classname="TestOsd" time="0.045"/>
    <testcase name="TEST_OSD_LINK_1" description="将两个region link在一起，应返回ok" status="run" classname="TestOsd" time="0.045"/>
    <testcase name="TEST_OSD_SHOWREGION_1" description="调用show region，应返回ok" status="run" classname="TestOsd" time="0.065"/>
    <testcase name="TEST_OSD_CLEAREREGION_1" description="调用clear full draw region为白色，应返回ok" status="run" classname="TestOsd" time="0.046"/>
    <testcase name="TEST_OSD_CLEAREREGION_2" description="调用update region，句柄传disp region，应返回ok，询问测试员，画面应显示为白色" status="run" classname="TestOsd" time="89.251"/>
    <testcase name="TEST_OSD_CLEAREREGION_3" description="调用clear full draw region为红色，应返回ok" status="run" classname="TestOsd" time="0.046"/>
    <testcase name="TEST_OSD_UPDATE_1" description="调用update region area左上角，句柄传disp region，应返回ok，询问测试员，画面应仅仅左上角显示为红色" status="run" classname="TestOsd" time="10.832"/>
    <testcase name="TEST_OSD_UPDATE_2" description="调用update region应返回ok，句柄传draw region，询问测试员，画面应显示为全部红色" status="run" classname="TestOsd" time="3.192"/>
    <testcase name="TEST_OSD_CLEAREREGION_4" description="调用clear area，将左上角四分之一的区域画为透明色，应返回ok" status="run" classname="TestOsd" time="0.046"/>
    <testcase name="TEST_OSD_UPDATE_3" description="调用update region应返回ok，询问测试员，画面应显示左上角透明色，其他红色" status="run" classname="TestOsd" time="3.274"/>
    <testcase name="TEST_OSD_CLEAREREGION_5" description="调用clear area，将左上角四分之一的区域画为白色，应返回ok" status="run" classname="TestOsd" time="0.045"/>
    <testcase name="TEST_OSD_UPDATE_4" description="调用update region应返回ok，询问测试员，画面应显示左上角白色，其他红色" status="run" classname="TestOsd" time="2.624"/>
    <testcase name="TEST_OSD_GETDATA_1" description="调用get area data左上角数据，应返回ok" status="run" classname="TestOsd" time="0.054"/>
    <testcase name="TEST_OSD_PUTDATA_1" description="调用put area data，将数据put到屏幕的右上角，应返回ok" status="run" classname="TestOsd" time="0.051"/>
    <testcase name="TEST_OSD_UPDATE_5" description="调用update region应返回ok，询问测试员，" status="run" classname="TestOsd" time="2.629"/>
    <testcase name="TEST_OSD_COPYRECT" description="调用copy rect，将draw regioin的上半部分拷贝到下半部分，应返回ok" status="run" classname="TestOsd" time="0.1">
      <failure message="Value of: CHDRV_OSD_CopyRect(grh_DrawHandleOsd1,grh_DrawHandleOsd1,0,0,((S32)fw_getenv_i(&quot;OSD_REGION_WIDTH&quot;)),((S32)fw_getenv_i(&quot;OSD_REGION_HEIGHT&quot;))/2,0,((S32)fw_getenv_i(&quot;OSD_REGION_HEIGHT&quot;))/2)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1346<br />
Value of: CHDRV_OSD_CopyRect(grh_DrawHandleOsd1,grh_DrawHandleOsd1,0,0,((S32)fw_getenv_i("OSD_REGION_WIDTH")),((S32)fw_getenv_i("OSD_REGION_HEIGHT"))/2,0,((S32)fw_getenv_i("OSD_REGION_HEIGHT"))/2)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_UPDATE_6" description="调用update region应返回ok，询问测试员，画面应全部显示为白色" status="run" classname="TestOsd" time="3.415">
      <failure message="Value of: test_input_yes()&#x0A;  Actual: 0(0x0)&#x0A;Expected: (1)&#x0A;Which is: 1(0x1)&#x0A;CHDRV_OSD_CopyRect功能未实现" type=""><![CDATA[gtest/case/module/test_osd.cpp:1355<br />
Value of: test_input_yes()<br />
  Actual: 0(0x0)<br />
Expected: (1)<br />
Which is: 1(0x1)<br />
CHDRV_OSD_CopyRect功能未实现]]></failure>
    </testcase>
    <testcase name="TEST_OSD_CLEARAREA_1" description="调用clear area，其中坐标分别在上下左右越界，可以返回不成功但不应死机，或屏幕乱" status="run" classname="TestOsd" time="0.05"/>
    <testcase name="TEST_OSD_GETDATA_2" description="调用get area data，其中坐标分别在上下左右越界，可以返回不成功但不应死机，或屏幕乱" status="run" classname="TestOsd" time="0.049"/>
    <testcase name="TEST_OSD_PUTDATA_2" description="调用put area data，其中坐标分别在上下左右越界，可以返回不成功但不应死机，或屏幕乱" status="run" classname="TestOsd" time="0.05"/>
    <testcase name="TEST_OSD_UPDATA_AREA_1" description="调用update region area，其中坐标分别在上下左右越界，可以返回不成功但不应死机，或屏幕乱" status="run" classname="TestOsd" time="0.05"/>
    <testcase name="TEST_OSD_SETPIXEL" description="调用set pixel函数绘制一个方块，然后调用get area data获取数据进行比较，应成功" status="run" classname="TestOsd" time="0.154"/>
    <testcase name="TEST_OSD_GETPIXEL" description="调用get pixel函数获取内容，应正确" status="run" classname="TestOsd" time="0.068">
      <failure message="Value of: (0xF0F0)&#x0A;  Actual: 61680(0xf0f0)&#x0A;Expected: i_Color&#x0A;Which is: 4278190080(0xff000000)&#x0A;CHDRV_OSD_GetPixel未正确实现" type=""><![CDATA[gtest/case/module/test_osd.cpp:1434<br />
Value of: (0xF0F0)<br />
  Actual: 61680(0xf0f0)<br />
Expected: i_Color<br />
Which is: 4278190080(0xff000000)<br />
CHDRV_OSD_GetPixel未正确实现]]></failure>
    </testcase>
    <testcase name="TEST_OSD_DRAWLINE" description="多次调用draw line函数以不同的宽度绘制成一个方块，然后调用get area data获取数据进行比较，应成功" status="run" classname="TestOsd" time="0.094">
      <failure message="Value of: *(puc_Data+i_Loop )&#x0A;  Actual: 0(0x0)&#x0A;Expected: (0xF00F)&#x0A;Which is: 61455(0xf00f)&#x0A;CHDRV_OSD_DrawLine未正确实现" type=""><![CDATA[gtest/case/module/test_osd.cpp:1472<br />
Value of: *(puc_Data+i_Loop )<br />
  Actual: 0(0x0)<br />
Expected: (0xF00F)<br />
Which is: 61455(0xf00f)<br />
CHDRV_OSD_DrawLine未正确实现]]></failure>
      <failure message="Value of: *(puc_Data+i_Loop )&#x0A;  Actual: 0(0x0)&#x0A;Expected: (0xF00F)&#x0A;Which is: 61455(0xf00f)&#x0A;CHDRV_OSD_DrawLine未正确实现" type=""><![CDATA[gtest/case/module/test_osd.cpp:1492<br />
Value of: *(puc_Data+i_Loop )<br />
  Actual: 0(0x0)<br />
Expected: (0xF00F)<br />
Which is: 61455(0xf00f)<br />
CHDRV_OSD_DrawLine未正确实现]]></failure>
    </testcase>
    <testcase name="TEST_OSD_DRAWHLINE" description="多次调用draw H line函数绘制成一个方块，然后调用get area data获取数据进行比较，应成功" status="run" classname="TestOsd" time="0.111">
      <failure message="Value of: ret = CHDRV_OSD_DrawHLine(h_DrawRegion,0, 0, i_StartX,i_StartY, (200),CHDRV_OSD_COLOR_TYPE_ARGB4444,i_LineColor,enm_AluMode)&#x0A;  Actual: 4(0x4)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1521<br />
Value of: ret = CHDRV_OSD_DrawHLine(h_DrawRegion,0, 0, i_StartX,i_StartY, (200),CHDRV_OSD_COLOR_TYPE_ARGB4444,i_LineColor,enm_AluMode)<br />
  Actual: 4(0x4)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)]]></failure>
      <failure message="Value of: Osd_Compare_SingleData(grh_DrawHandleOsd1,(200),(200), (200),(200),&amp;i_LineColor,CHDRV_OSD_COLOR_TYPE_ARGB4444)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)&#x0A;CHDRV_OSD_DrawHLine未正确实现" type=""><![CDATA[gtest/case/module/test_osd.cpp:1530<br />
Value of: Osd_Compare_SingleData(grh_DrawHandleOsd1,(200),(200), (200),(200),&i_LineColor,CHDRV_OSD_COLOR_TYPE_ARGB4444)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)<br />
CHDRV_OSD_DrawHLine未正确实现]]></failure>
    </testcase>
    <testcase name="TEST_OSD_DRAWVLINE" description="多次调用draw V line函数绘制成一个方块，然后调用get area data获取数据进行比较，应成功" status="run" classname="TestOsd" time="0.112">
      <failure message="Value of: ret = CHDRV_OSD_DrawVLine(h_DrawRegion,0, 0, i_StartX,i_StartY, (200),CHDRV_OSD_COLOR_TYPE_ARGB4444,i_LineColor,enm_AluMode)&#x0A;  Actual: 4(0x4)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_osd.cpp:1554<br />
Value of: ret = CHDRV_OSD_DrawVLine(h_DrawRegion,0, 0, i_StartX,i_StartY, (200),CHDRV_OSD_COLOR_TYPE_ARGB4444,i_LineColor,enm_AluMode)<br />
  Actual: 4(0x4)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)]]></failure>
      <failure message="Value of: Osd_Compare_SingleData(grh_DrawHandleOsd1,(200),(200), (200),(200),&amp;i_LineColor,CHDRV_OSD_COLOR_TYPE_ARGB4444)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)&#x0A;CHDRV_OSD_DrawVLine未正确实现" type=""><![CDATA[gtest/case/module/test_osd.cpp:1563<br />
Value of: Osd_Compare_SingleData(grh_DrawHandleOsd1,(200),(200), (200),(200),&i_LineColor,CHDRV_OSD_COLOR_TYPE_ARGB4444)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)<br />
CHDRV_OSD_DrawVLine未正确实现]]></failure>
    </testcase>
    <testcase name="TEST_OSD_ALLOCMEM_1" description="调用osd memory创建一个480X320Xcolor bytes大小的内存" status="run" classname="TestOsd" time="0.051"/>
    <testcase name="TEST_OSD_DRAWRECT_1" description="调用draw rect函数以draw memory方式绘制方块，然后进行数据比较，应符合预期" status="run" classname="TestOsd" time="0.076"/>
    <testcase name="TEST_OSD_BUFBITBLIT_1" description="先clear draw region，然后调用buf bitblit将刚刚绘制的方块COPY到draw region上，应成功" status="run" classname="TestOsd" time="0.055"/>
    <testcase name="TEST_OSD_GETDATA_3" description="调用get area data，数据应符合预期" status="run" classname="TestOsd" time="0.054"/>
    <testcase name="TEST_OSD_BUFBITBLIT_2" description="先clear draw region，然后调用buf bitblit将刚刚绘制的方块放大到draw region上，应成功" status="run" classname="TestOsd" time="0.057"/>
    <testcase name="TEST_OSD_BUFBITBLIT_3" description="调用get area data，放大后数据应符合预期" status="run" classname="TestOsd" time="0.077"/>
    <testcase name="TEST_OSD_BUFBITBLIT_4" description="先clear draw region，然后调用buf bitblit将刚刚绘制的方块缩小到draw region上，应成功" status="run" classname="TestOsd" time="0.054"/>
    <testcase name="TEST_OSD_BUFBITBLIT_5" description="调用get area data，缩小后数据应符合预期" status="run" classname="TestOsd" time="0.054"/>
    <testcase name="TEST_OSD_BUFBITBLIT_6" description="先clear draw region，然后调用buf bitblit将刚刚绘制的方块用alpha blend到draw region上，应成功" status="run" classname="TestOsd" time="0.059"/>
    <testcase name="TEST_OSD_BUFBITBLIT_7" description="调用get area data，alpha blend后数据应符合预期" status="run" classname="TestOsd" time="0.077"/>
    <testcase name="TEST_OSD_BUFBITBLIT_8" description="先clear draw region，然后调用buf bitblit将刚刚绘制的方块用alpha blend到draw region上，应成功" status="run" classname="TestOsd" time="0.059"/>
    <testcase name="TEST_OSD_BUFBITBLIT_9" description="调用get area data，alpha blend后数据应符合预期" status="run" classname="TestOsd" time="0.077"/>
    <testcase name="TEST_OSD_BUFBITBLIT_10" description="再创建一个480X320、相同颜色模式的draw region2，应成功" status="run" classname="TestOsd" time="0.051"/>
    <testcase name="TEST_OSD_BUFBITBLIT_11" description="调用draw rect函数以draw region handle方式绘制方块到region2上，然后调用get area data获取数据进行比较，应成功" status="run" classname="TestOsd" time="0.055"/>
    <testcase name="TEST_OSD_BUFBITBLIT_12" description="先clear draw region，然后调用bitblit将刚刚绘制的方块从region2 COPY到draw region上，应成功" status="run" classname="TestOsd" time="0.054"/>
    <testcase name="TEST_OSD_BUFBITBLIT_13" description="调用get area data，数据应符合预期" status="run" classname="TestOsd" time="0.054"/>
    <testcase name="TEST_OSD_BUFBITBLIT_14" description="先clear draw region，然后调用bitblit将刚刚绘制的方块放大到draw region上，应成功" status="run" classname="TestOsd" time="0.058"/>
    <testcase name="TEST_OSD_BUFBITBLIT_15" description="调用get area data，放大后数据应符合预期" status="run" classname="TestOsd" time="0.078"/>
    <testcase name="TEST_OSD_BUFBITBLIT_16" description="先clear draw region，然后调用buf bitblit将刚刚绘制的方块缩小到draw region上，应成功" status="run" classname="TestOsd" time="0.054"/>
    <testcase name="TEST_OSD_BUFBITBLIT_17" description="调用get area data，缩小后数据应符合预期" status="run" classname="TestOsd" time="0.054"/>
    <testcase name="TEST_OSD_BUFBITBLIT_18" description="先clear draw region，然后调用buf bitblit将刚刚绘制的方块用alpha blend到draw region上，应成功" status="run" classname="TestOsd" time="0.058"/>
    <testcase name="TEST_OSD_BUFBITBLIT_19" description="调用get area data，alpha blend后数据应符合预期" status="run" classname="TestOsd" time="0.077"/>
    <testcase name="TEST_OSD_BUFBITBLIT_20" description="先clear draw region，然后调用buf bitblit将刚刚绘制的方块用alpha blend到draw region上，应成功" status="run" classname="TestOsd" time="0.059"/>
    <testcase name="TEST_OSD_BUFBITBLIT_21" description="调用get area data，alpha blend后数据应符合预期" status="run" classname="TestOsd" time="0.077"/>
    <testcase name="TEST_OSD_DELETEREGIOIN_1" description="删除创建的所有region，应成功" status="run" classname="TestOsd" time="0.045"/>
    <testcase name="TEST_OSD_CREATEREGION_1" description="以合法参数创建一个osd1 draw region，其中宽高为720X576，颜色格式为1555，应返回成功" status="run" classname="TestOsd" time="0.054"/>
    <testcase name="TEST_OSD_CREATEREGION_2" description="以合法参数创建一个osd1 display region，其中宽高为720X576，颜色格式为1555，应返回成功" status="run" classname="TestOsd" time="0.05"/>
    <testcase name="TEST_OSD_GETATTRIB_1" description="针对刚刚创建的2个region，分别调用get attrib，应返回成功；属性值应正确" status="run" classname="TestOsd" time="0.05"/>
    <testcase name="TEST_OSD_LINK_2" description="将两个region link在一起，应返回ok" status="run" classname="TestOsd" time="0.05"/>
    <testcase name="TEST_OSD_SHOWREGION_2" description="调用show region，应返回ok" status="run" classname="TestOsd" time="0.053"/>
    <testcase name="TEST_OSD_CLEARREGION_1" description="调用clear full draw region为白色，应返回ok" status="run" classname="TestOsd" time="0.056"/>
    <testcase name="TEST_OSD_DRAWRECT_2" description="调用draw rect函数以draw region handle方式绘制方块，然后调用get area data获取数据进行比较，应成功" status="run" classname="TestOsd" time="0.055"/>
    <testcase name="TEST_OSD_DRAWRECT_3" description="调用update region应返回ok，询问测试员，画面显示应符合预期" status="run" classname="TestOsd" time="3.361"/>
    <testcase name="TEST_OSD_DRAWRECT_2_1" description="调用draw rect函数以draw region handle方式绘制透明方块，然后调用get area data获取数据进行比较，应成功" status="run" classname="TestOsd" time="0.055"/>
    <testcase name="TEST_OSD_DRAWRECT_3_1" description="调用update region应返回ok，询问测试员，画面显示应符合预期" status="run" classname="TestOsd" time="2.631"/>
    <testcase name="TEST_OSD_DELETEREGIOIN_2" description="删除创建的所有region，应成功" status="run" classname="TestOsd" time="0.045"/>
    <testcase name="TEST_OSD_CREATEREGION_3" description="以合法参数创建一个osd1 draw region，其中宽高为720X576，颜色格式为8888，应返回成功" status="run" classname="TestOsd" time="0.058"/>
    <testcase name="TEST_OSD_CREATEREGION_4" description="以合法参数创建一个osd1 display region，其中宽高为720X576，颜色格式为8888，应返回成功" status="run" classname="TestOsd" time="0.049"/>
    <testcase name="TEST_OSD_GETATTRIB_2" description="针对刚刚创建的2个region，分别调用get attrib，应返回成功；属性值应正确" status="run" classname="TestOsd" time="0.05"/>
    <testcase name="TEST_OSD_LINK_3" description="将两个region link在一起，应返回ok" status="run" classname="TestOsd" time="0.049"/>
    <testcase name="TEST_OSD_SHOWREGION_3" description="调用show region，应返回ok" status="run" classname="TestOsd" time="0.053"/>
    <testcase name="TEST_OSD_CLEARREGION_2" description="调用clear full draw region为白色，应返回ok" status="run" classname="TestOsd" time="0.051"/>
    <testcase name="TEST_OSD_DRAWRECT_4" description="调用draw rect函数以draw region handle方式绘制方块，然后调用get area data获取数据进行比较，应成功" status="run" classname="TestOsd" time="0.057"/>
    <testcase name="TEST_OSD_DRAWRECT_5" description="调用update region应返回ok，询问测试员，画面显示应符合预期" status="run" classname="TestOsd" time="2.614"/>
    <testcase name="TEST_OSD_DRAWRECT_4_1" description="调用draw rect函数以draw region handle方式绘制方块，然后调用get area data获取数据进行比较，应成功" status="run" classname="TestOsd" time="0.057"/>
    <testcase name="TEST_OSD_DRAWRECT_5_1" description="调用update region应返回ok，询问测试员，画面显示应符合预期" status="run" classname="TestOsd" time="3.414"/>
    <testcase name="TEST_OSD_CREATEREGION_5" description="以合法参数创建一个osd2 draw region，其中宽高为720X576，颜色格式为8888，应返回成功" status="run" classname="TestOsd" time="0.058"/>
    <testcase name="TEST_OSD_CREATEREGION_6" description="以合法参数创建一个osd2 display region，其中宽高为720X576，颜色格式为8888，应返回成功" status="run" classname="TestOsd" time="0.054"/>
    <testcase name="TEST_OSD_GETATTRIB_3" description="针对刚刚创建的2个region，分别调用get attrib，应返回成功；属性值应正确" status="run" classname="TestOsd" time="0.05"/>
    <testcase name="TEST_OSD_LINK_4" description="将两个region link在一起，应返回ok" status="run" classname="TestOsd" time="0.05"/>
    <testcase name="TEST_OSD_SHOWREGION_4" description="调用show region，应返回ok" status="run" classname="TestOsd" time="0.066"/>
    <testcase name="TEST_OSD_CLEARAREA_2" description="调用clear full draw region为白色，应返回ok" status="run" classname="TestOsd" time="0.052"/>
    <testcase name="TEST_OSD_DRAWRECT_6" description="调用draw rect函数以draw region handle方式绘制方块，然后调用get area data获取数据进行比较，应成功" status="run" classname="TestOsd" time="0.082">
      <failure message="Value of: Osd_Compare_SingleData(grh_DrawHandleOsd2,(200),(200),(200),(200),&amp;ui_Color,CHDRV_OSD_COLOR_TYPE_ARGB8888)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_osd.cpp:2307<br />
Value of: Osd_Compare_SingleData(grh_DrawHandleOsd2,(200),(200),(200),(200),&ui_Color,CHDRV_OSD_COLOR_TYPE_ARGB8888)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)]]></failure>
    </testcase>
    <testcase name="TEST_OSD_DRAWRECT_7" description="调用update region应返回ok，询问测试员，画面显示应符合预期，与osd1的叠加遮挡效果正常" status="run" classname="TestOsd" time="6.02">
      <failure message="Value of: test_input_yes()&#x0A;  Actual: 0(0x0)&#x0A;Expected: (1)&#x0A;Which is: 1(0x1)&#x0A;osd2未正确实现" type=""><![CDATA[gtest/case/module/test_osd.cpp:2316<br />
Value of: test_input_yes()<br />
  Actual: 0(0x0)<br />
Expected: (1)<br />
Which is: 1(0x1)<br />
osd2未正确实现]]></failure>
    </testcase>
    <testcase name="TEST_OSD_SETALPHA_1" description="调用set osd alpha设置osd1的透明度分别为100,80,40,0，osd2的透明度应不受影响，询问测试员效果是否OK" status="run" classname="TestOsd" time="11.422"/>
    <testcase name="TEST_OSD_SETALPHA_2" description="调用set osd alpha设置osd2的透明度分别为100,80,40,0，osd1的透明度应不受影响，询问测试员效果是否OK" status="run" classname="TestOsd" time="6.626">
      <failure message="Value of: test_input_yes()&#x0A;  Actual: 0(0x0)&#x0A;Expected: (1)&#x0A;Which is: 1(0x1)&#x0A;osd2透明度设置未正确实现" type=""><![CDATA[gtest/case/module/test_osd.cpp:2351<br />
Value of: test_input_yes()<br />
  Actual: 0(0x0)<br />
Expected: (1)<br />
Which is: 1(0x1)<br />
osd2透明度设置未正确实现]]></failure>
    </testcase>
    <testcase name="TEST_OSD_HIDE_1" description="调用hide region 2，应只可见osd1，询问测试员效果是否一致" status="run" classname="TestOsd" time="3.411">
      <failure message="Value of: test_input_yes()&#x0A;  Actual: 0(0x0)&#x0A;Expected: (1)&#x0A;Which is: 1(0x1)&#x0A;CHDRV_OSD_HideRegion未正确实现" type=""><![CDATA[gtest/case/module/test_osd.cpp:2358<br />
Value of: test_input_yes()<br />
  Actual: 0(0x0)<br />
Expected: (1)<br />
Which is: 1(0x1)<br />
CHDRV_OSD_HideRegion未正确实现]]></failure>
    </testcase>
    <testcase name="TEST_OSD_HIDE_2" description="调用hide region 1，region 1和2应均不可见，询问测试员效果是否一致" status="run" classname="TestOsd" time="4.442"/>
    <testcase name="TEST_OSD_SHOWREGION_5" description="调用show region 2，应只可见osd2，询问操作员效果是否一致" status="run" classname="TestOsd" time="3.088">
      <failure message="Value of: test_input_yes()&#x0A;  Actual: 0(0x0)&#x0A;Expected: (1)&#x0A;Which is: 1(0x1)&#x0A;CHDRV_OSD_ShowRegion未正确实现" type=""><![CDATA[gtest/case/module/test_osd.cpp:2372<br />
Value of: test_input_yes()<br />
  Actual: 0(0x0)<br />
Expected: (1)<br />
Which is: 1(0x1)<br />
CHDRV_OSD_ShowRegion未正确实现]]></failure>
    </testcase>
    <testcase name="TEST_OSD_SHOWREGION_6" description="调用show region 1，osd 1和2均可见，询问操作员效果是否一致" status="run" classname="TestOsd" time="3.427">
      <failure message="Value of: test_input_yes()&#x0A;  Actual: 0(0x0)&#x0A;Expected: (1)&#x0A;Which is: 1(0x1)&#x0A;CHDRV_OSD_ShowRegion未正确实现" type=""><![CDATA[gtest/case/module/test_osd.cpp:2379<br />
Value of: test_input_yes()<br />
  Actual: 0(0x0)<br />
Expected: (1)<br />
Which is: 1(0x1)<br />
CHDRV_OSD_ShowRegion未正确实现]]></failure>
    </testcase>
    <testcase name="TEST_OSD_POSITION_1" description="osd1和osd2上的方块位置、大小，与背景上的I帧标尺是否一致，询问操作员反馈结果" status="run" classname="TestOsd" time="8.291">
      <failure message="Value of: test_input_yes()&#x0A;  Actual: 0(0x0)&#x0A;Expected: (1)&#x0A;Which is: 1(0x1)&#x0A;显示位置与I帧不符合" type=""><![CDATA[gtest/case/module/test_osd.cpp:2388<br />
Value of: test_input_yes()<br />
  Actual: 0(0x0)<br />
Expected: (1)<br />
Which is: 1(0x1)<br />
显示位置与I帧不符合]]></failure>
    </testcase>
    <testcase name="TEST_OSD_CREATE_3" description="一次性在OSD1上创建2个OSD_REGION_WH大小，颜色格式为8888的draw region，应返回成功。然后释放" status="run" classname="TestOsd" time="0.069"/>
    <testcase name="TEST_OSD_CREATE_4" description="一次性在OSD2上创建2个OSD_REGION_WH大小，颜色格式为8888的draw region，应返回成功。然后释放" status="run" classname="TestOsd" time="0.068"/>
    <testcase name="TEST_OSD_ALLOCMEM_2" description="osd malloc 4 Mbytes内存，应返回成功" status="run" classname="TestOsd" time="0.06"/>
    <testcase name="TEST_OSD_PICTURE1" description="调用get image info，参数为路径方式，获取GIF图片的信息，应成功" status="run" classname="TestOsd" time="0.143">
      <failure message="Value of: stru_ImgInfo.ui_Width&#x0A;  Actual: 328(0x148)&#x0A;Expected: fw_getenv_i(&quot;OSD_GIF_WIDTH&quot;)&#x0A;Which is: 324(0x144)&#x0A;获取图片信息宽度错误" type=""><![CDATA[gtest/case/module/test_osd.cpp:2471<br />
Value of: stru_ImgInfo.ui_Width<br />
  Actual: 328(0x148)<br />
Expected: fw_getenv_i("OSD_GIF_WIDTH")<br />
Which is: 324(0x144)<br />
获取图片信息宽度错误]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PICTURE2" description="调用get image info，参数为路径方式，获取JPEG图片的信息，应成功" status="run" classname="TestOsd" time="0.07"/>
    <testcase name="TEST_OSD_PICTURE3" description="调用get image info，参数为路径方式，获取PNG图片的信息，应成功" status="run" classname="TestOsd" time="0.1"/>
    <testcase name="TEST_OSD_PICTURE4" description="调用get image info，参数为路径方式，获取BMP图片的信息，应成功" status="run" classname="TestOsd" time="0.33"/>
    <testcase name="TEST_OSD_PICTURE5" description="调用get image info，参数为内存指针方式，获取GIF图片的信息，应成功" status="run" classname="TestOsd" time="0.08">
      <failure message="Failed&#x0A;can not malloc memory,size=4294866902" type=""><![CDATA[gtest/case/module/test_osd.cpp:2534<br />
Failed<br />
can not malloc memory,size=4294866902]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PICTURE6" description="调用get image info，参数为内存指针方式，获取JPEG图片的信息，应成功" status="run" classname="TestOsd" time="0.081">
      <failure message="Failed&#x0A;can not malloc memory,size=4294834792" type=""><![CDATA[gtest/case/module/test_osd.cpp:2564<br />
Failed<br />
can not malloc memory,size=4294834792]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PICTURE7" description="调用get image info，参数为内存指针方式，获取PNG图片的信息，应成功" status="run" classname="TestOsd" time="0.091">
      <failure message="Failed&#x0A;can not malloc memory,size=4294527854" type=""><![CDATA[gtest/case/module/test_osd.cpp:2593<br />
Failed<br />
can not malloc memory,size=4294527854]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PICTURE8" description="调用get image info，参数为内存指针方式，获取BMP图片的信息，应成功" status="run" classname="TestOsd" time="0.097">
      <failure message="Failed&#x0A;can not malloc memory,size=4294407370" type=""><![CDATA[gtest/case/module/test_osd.cpp:2622<br />
Failed<br />
can not malloc memory,size=4294407370]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PICTURE9" description="调用decoder image GIF，参数为路径方式，输出宽高与原图一致，应成功;比较内存数据与预期一致" status="run" classname="TestOsd" time="2.213"/>
    <testcase name="TEST_OSD_PICTURE10" description="调用decoder image JPEG，参数为路径方式，输出宽高与原图一致，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="2.161"/>
    <testcase name="TEST_OSD_PICTURE11" description="调用decoder image PNG，参数为路径方式，输出宽高与原图一致，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="0.142">
      <failure message="Value of: ret = CHDRV_OSD_DecodeImage(grh_DrawHandleOsd1, stru_Rect, &amp;stru_ImgData)&#x0A;  Actual: 6(0x6)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_osd.cpp:2808<br />
Value of: ret = CHDRV_OSD_DecodeImage(grh_DrawHandleOsd1, stru_Rect, &stru_ImgData)<br />
  Actual: 6(0x6)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)]]></failure>
      <failure message="Value of: osd_decode_pic((fw_getenv(&quot;OSD_PNG_FILEPATH&quot;)), data_path, ((S32)fw_getenv_i(&quot;OSD_PNG_WIDTH&quot;)), ((S32)fw_getenv_i(&quot;OSD_PNG_HEIGHT&quot;)))&#x0A;  Actual: 6(0x6)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)&#x0A;图片解析不正确, filename=c:/resource/pic324X576.png" type=""><![CDATA[gtest/case/module/test_osd.cpp:2936<br />
Value of: osd_decode_pic((fw_getenv("OSD_PNG_FILEPATH")), data_path, ((S32)fw_getenv_i("OSD_PNG_WIDTH")), ((S32)fw_getenv_i("OSD_PNG_HEIGHT")))<br />
  Actual: 6(0x6)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)<br />
图片解析不正确, filename=c:/resource/pic324X576.png]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PICTURE12" description="调用decoder image BMP，参数为路径方式，输出宽高与原图一致，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="2.415"/>
    <testcase name="TEST_OSD_PICTURE13" description="调用decoder image GIF，参数为内存指针方式，输出宽高与原图一致，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="2.207"/>
    <testcase name="TEST_OSD_PICTURE14" description="调用decoder image JPEG，参数为内存指针方式，输出宽高与原图一致，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="2.16"/>
    <testcase name="TEST_OSD_PICTURE15" description="调用decoder image PNG，参数为内存指针方式，输出宽高与原图一致，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="0.139">
      <failure message="Value of: ret = CHDRV_OSD_DecodeImage(grh_DrawHandleOsd1,stru_Rect, &amp;stru_ImgData)&#x0A;  Actual: 6(0x6)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_osd.cpp:2873<br />
Value of: ret = CHDRV_OSD_DecodeImage(grh_DrawHandleOsd1,stru_Rect, &stru_ImgData)<br />
  Actual: 6(0x6)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)]]></failure>
      <failure message="Value of: osd_decode_data((fw_getenv(&quot;OSD_PNG_FILEPATH&quot;)), data_path, ((S32)fw_getenv_i(&quot;OSD_PNG_WIDTH&quot;)), ((S32)fw_getenv_i(&quot;OSD_PNG_HEIGHT&quot;)))&#x0A;  Actual: 6(0x6)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)&#x0A;图片解析不正确, filename=c:/resource/pic324X576.png" type=""><![CDATA[gtest/case/module/test_osd.cpp:2976<br />
Value of: osd_decode_data((fw_getenv("OSD_PNG_FILEPATH")), data_path, ((S32)fw_getenv_i("OSD_PNG_WIDTH")), ((S32)fw_getenv_i("OSD_PNG_HEIGHT")))<br />
  Actual: 6(0x6)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)<br />
图片解析不正确, filename=c:/resource/pic324X576.png]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PICTURE16" description="调用decoder image BMP，参数为内存指针方式，输出宽高与原图一致，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="2.41"/>
    <testcase name="TEST_OSD_PICTURE17" description="调用decoder image GIF，参数为路径方式，输出宽高是原图的三分之一，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="3.338"/>
    <testcase name="TEST_OSD_PICTURE18" description="调用decoder image JPEG，参数为路径方式，输出宽高是原图的三分之一，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="3.263"/>
    <testcase name="TEST_OSD_PICTURE19" description="调用decoder image PNG，参数为路径方式，输出宽高是原图的三分之一，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="2.873">
      <failure message="Value of: ret = CHDRV_OSD_DecodeImage(grh_DrawHandleOsd1, stru_Rect, &amp;stru_ImgData)&#x0A;  Actual: 6(0x6)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_osd.cpp:2808<br />
Value of: ret = CHDRV_OSD_DecodeImage(grh_DrawHandleOsd1, stru_Rect, &stru_ImgData)<br />
  Actual: 6(0x6)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)]]></failure>
      <failure message="Value of: osd_decode_pic(fw_getenv(&quot;OSD_PNG_COMMON_FILE&quot;), data_path, stru_ImgInfo.ui_Width / 3, stru_ImgInfo.ui_Height / 3)&#x0A;  Actual: 6(0x6)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)&#x0A;图片解析不正确, filename=c:/resource/pic1080X1920.png" type=""><![CDATA[gtest/case/module/test_osd.cpp:3034<br />
Value of: osd_decode_pic(fw_getenv("OSD_PNG_COMMON_FILE"), data_path, stru_ImgInfo.ui_Width / 3, stru_ImgInfo.ui_Height / 3)<br />
  Actual: 6(0x6)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)<br />
图片解析不正确, filename=c:/resource/pic1080X1920.png]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PICTURE20" description="调用decoder image BMP，参数为路径方式，输出宽高是原图的三分之一，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="10.524">
      <failure message="Value of: ret = test_input_yes()&#x0A;  Actual: 0(0x0)&#x0A;Expected: (1)&#x0A;Which is: 1(0x1)&#x0A;测试员认为显示不正确. pic name=c:/resource/pic1080X1920.bmp,size=408960" type=""><![CDATA[gtest/case/module/test_osd.cpp:325<br />
Value of: ret = test_input_yes()<br />
  Actual: 0(0x0)<br />
Expected: (1)<br />
Which is: 1(0x1)<br />
测试员认为显示不正确. pic name=c:/resource/pic1080X1920.bmp,size=408960]]></failure>
      <failure message="Value of: ret = Osd_Compare_Data(grh_DrawHandleOsd1,stru_Rect.s_X,stru_Rect.s_Y,w, h,data_name, stru_RegionAttrib.enm_ColorType, file_name)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)&#x0A;解码错误，filename=c:/resource/pic1080X1920.bmp" type=""><![CDATA[gtest/case/module/test_osd.cpp:2817<br />
Value of: ret = Osd_Compare_Data(grh_DrawHandleOsd1,stru_Rect.s_X,stru_Rect.s_Y,w, h,data_name, stru_RegionAttrib.enm_ColorType, file_name)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)<br />
解码错误，filename=c:/resource/pic1080X1920.bmp]]></failure>
      <failure message="Value of: osd_decode_pic(fw_getenv(&quot;OSD_BMP_COMMON_FILE&quot;), data_path, stru_ImgInfo.ui_Width / 3, stru_ImgInfo.ui_Height / 3)&#x0A;  Actual: 1(0x1)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)&#x0A;图片解析不正确, filename=c:/resource/pic1080X1920.bmp" type=""><![CDATA[gtest/case/module/test_osd.cpp:3050<br />
Value of: osd_decode_pic(fw_getenv("OSD_BMP_COMMON_FILE"), data_path, stru_ImgInfo.ui_Width / 3, stru_ImgInfo.ui_Height / 3)<br />
  Actual: 1(0x1)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)<br />
图片解析不正确, filename=c:/resource/pic1080X1920.bmp]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PICTURE21" description="调用decoder image GIF，参数为路径方式，输出宽高是原图的三倍，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="2.169"/>
    <testcase name="TEST_OSD_PICTURE22" description="调用decoder image JPEG，参数为路径方式，输出宽高是原图的三倍，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="2.156"/>
    <testcase name="TEST_OSD_PICTURE23" description="调用decoder image PNG，参数为路径方式，输出宽高是原图的三倍，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="0.14">
      <failure message="Value of: ret = CHDRV_OSD_DecodeImage(grh_DrawHandleOsd1, stru_Rect, &amp;stru_ImgData)&#x0A;  Actual: 6(0x6)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_osd.cpp:2808<br />
Value of: ret = CHDRV_OSD_DecodeImage(grh_DrawHandleOsd1, stru_Rect, &stru_ImgData)<br />
  Actual: 6(0x6)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)]]></failure>
      <failure message="Value of: osd_decode_pic(fw_getenv(&quot;OSD_PNG_LITTLE_FILE&quot;), data_path, stru_ImgInfo.ui_Width * 3, stru_ImgInfo.ui_Height * 3)&#x0A;  Actual: 6(0x6)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)&#x0A;图片解析不正确, filename=c:/resource/pic98X173.png" type=""><![CDATA[gtest/case/module/test_osd.cpp:3095<br />
Value of: osd_decode_pic(fw_getenv("OSD_PNG_LITTLE_FILE"), data_path, stru_ImgInfo.ui_Width * 3, stru_ImgInfo.ui_Height * 3)<br />
  Actual: 6(0x6)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)<br />
图片解析不正确, filename=c:/resource/pic98X173.png]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PICTURE24" description="调用decoder image BMP，参数为路径方式，输出宽高是原图的三倍，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="2.415"/>
    <testcase name="TEST_OSD_PICTURE25" description="调用decoder image GIF，参数为路径方式，输出宽高为0，应输出原图大小，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="2.269"/>
    <testcase name="TEST_OSD_PICTURE26" description="调用decoder image JPEG，参数为路径方式，输出宽高为0，应输出原图大小，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="2.117"/>
    <testcase name="TEST_OSD_PICTURE27" description="调用decoder image PNG，参数为路径方式，输出宽高为0，应输出原图大小，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="0.131">
      <failure message="Value of: ret = CHDRV_OSD_DecodeImage(grh_DrawHandleOsd1, stru_Rect, &amp;stru_ImgData)&#x0A;  Actual: 6(0x6)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_osd.cpp:2808<br />
Value of: ret = CHDRV_OSD_DecodeImage(grh_DrawHandleOsd1, stru_Rect, &stru_ImgData)<br />
  Actual: 6(0x6)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)]]></failure>
      <failure message="Value of: osd_decode_pic(fw_getenv(&quot;OSD_PNG_LITTLE_FILE&quot;), data_path, 0, 0)&#x0A;  Actual: 6(0x6)&#x0A;Expected: CHDRV_OSD_OK&#x0A;Which is: 0(0x0)&#x0A;图片解析不正确, filename=c:/resource/pic98X173.png" type=""><![CDATA[gtest/case/module/test_osd.cpp:3131<br />
Value of: osd_decode_pic(fw_getenv("OSD_PNG_LITTLE_FILE"), data_path, 0, 0)<br />
  Actual: 6(0x6)<br />
Expected: CHDRV_OSD_OK<br />
Which is: 0(0x0)<br />
图片解析不正确, filename=c:/resource/pic98X173.png]]></failure>
    </testcase>
    <testcase name="TEST_OSD_PICTURE28" description="调用decoder image BMP，参数为路径方式，输出宽高为0，应输出原图大小，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="2.251"/>
    <testcase name="TEST_OSD_PICTURE29" description="循环调用decoder image jpeg，参数为路径方式，输出宽高为整屏，应成功；比较内存数据与预期一致" status="run" classname="TestOsd" time="12.488"/>
  </testsuite>
  <testsuite name="TestAout" tests="16/16" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_AOUT_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestAout" time="0.052">
      <failure message="Value of: CHDRV_AOUT_Init()&#x0A;  Actual: 3(0x3)&#x0A;Expected: CHDRV_AOUT_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_aout.cpp:104<br />
Value of: CHDRV_AOUT_Init()<br />
  Actual: 3(0x3)<br />
Expected: CHDRV_AOUT_OK<br />
Which is: 0(0x0)]]></failure>
      <failure message="Value of: CHDRV_AOUT_Init()&#x0A;  Actual: 3(0x3)&#x0A;Expected: CHDRV_AOUT_OK&#x0A;Which is: 0(0x0)&#x0A;多次初始化应该返回OK" type=""><![CDATA[gtest/case/module/test_aout.cpp:105<br />
Value of: CHDRV_AOUT_Init()<br />
  Actual: 3(0x3)<br />
Expected: CHDRV_AOUT_OK<br />
Which is: 0(0x0)<br />
多次初始化应该返回OK]]></failure>
    </testcase>
    <testcase name="TEST_AOUT_INIT2" description="测试模块是否可被销毁" status="run" classname="TestAout" time="0.135"/>
    <testcase name="TEST_AOUT_INIT3" description="测试CHDRV_AOUT_GetVersion是否成功" status="run" classname="TestAout" time="0.022"/>
    <testcase name="TEST_AOUT_PARAMS1" description="测试CHDRV_AOUT_Open错误参数测试" status="run" classname="TestAout" time="0.097">
      <failure message="Value of: CHDRV_AOUT_Open((-2), &amp;h_SoundHandle)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_AOUT_INVALID_PARAM&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_aout.cpp:131<br />
Value of: CHDRV_AOUT_Open((-2), &h_SoundHandle)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_AOUT_INVALID_PARAM<br />
Which is: 3(0x3)]]></failure>
    </testcase>
    <testcase name="TEST_AOUT_PARAMS2" description="测试CHDRV_AOUT_SetMute和CHDRV_AOUT_GetMuteStatus错误参数" status="run" classname="TestAout" time="0.02"/>
    <testcase name="TEST_AOUT_PARAMS3" description="测试CHDRV_AOUT_SetVolume和GetVolume错误参数" status="run" classname="TestAout" time="0.02"/>
    <testcase name="TEST_AOUT_PARAMS4" description="测试CHDRV_AOUT_SetSoundChannelMode和GetSoundChannelMode错误参数" status="run" classname="TestAout" time="0.019"/>
    <testcase name="TEST_AOUT_PARAMS5" description="测试CHDRV_AOUT_SetSPDIFOutMode和CHDRV_AOUT_SetHDMIOutMode错误参数" status="run" classname="TestAout" time="0.056">
      <failure message="Value of: CHDRV_AOUT_SetSPDIFOutMode(b_CompressMode)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_AOUT_INVALID_PARAM&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_aout.cpp:177<br />
Value of: CHDRV_AOUT_SetSPDIFOutMode(b_CompressMode)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_AOUT_INVALID_PARAM<br />
Which is: 3(0x3)]]></failure>
      <failure message="Value of: CHDRV_AOUT_SetHDMIOutMode(b_CompressMode)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_AOUT_INVALID_PARAM&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_aout.cpp:178<br />
Value of: CHDRV_AOUT_SetHDMIOutMode(b_CompressMode)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_AOUT_INVALID_PARAM<br />
Which is: 3(0x3)]]></failure>
    </testcase>
    <testcase name="TEST_AOUT_PARAMS6" description="测试CHDRV_AOUT_Close错误参数" status="run" classname="TestAout" time="0.02"/>
    <testcase name="TEST_AOUT_OPEN" description="测试CHDRV_AOUT_Open正确参数打开，返回值应正确，handle不为NULL" status="run" classname="TestAout" time="8.721"/>
    <testcase name="TEST_AOUT_MUTE" description="测试静音或者取消静音,对应端口应能关闭输出;CHDRV_AOUT_GetMuteStatus能否正确返回静音状态" status="run" classname="TestAout" time="5.201"/>
    <testcase name="TEST_AOUT_VOLUME" description="测试设置不同音量在CVBS端口能听到音量变化,错误参数不会改变原来设定值;GetVolume获取当前音量正确" status="run" classname="TestAout" time="10.832">
      <failure message="Value of: c_LeftVolume&#x0A;  Actual: &apos;d&apos; (100, 0x64)&#x0A;Expected: 100 * (63)/64&#x0A;Which is: 98(0x62)" type=""><![CDATA[gtest/case/module/test_aout.cpp:265<br />
Value of: c_LeftVolume<br />
  Actual: 'd' (100, 0x64)<br />
Expected: 100 * (63)/64<br />
Which is: 98(0x62)]]></failure>
      <failure message="Value of: c_RightVolume&#x0A;  Actual: &apos;d&apos; (100, 0x64)&#x0A;Expected: 100 * (63)/64&#x0A;Which is: 98(0x62)" type=""><![CDATA[gtest/case/module/test_aout.cpp:266<br />
Value of: c_RightVolume<br />
  Actual: 'd' (100, 0x64)<br />
Expected: 100 * (63)/64<br />
Which is: 98(0x62)]]></failure>
    </testcase>
    <testcase name="TEST_AOUT_CHANNEL" description="设置SetSoundChannelMode不同参数能够正确响应,错误参数不会改变原先设定值;GetSoundChannelMode获取数据正确" status="run" classname="TestAout" time="3.901"/>
    <testcase name="TEST_AOUT_SPDIF" description="测试CHDRV_AOUT_SetSPDIFOutMode设置为压缩和非压缩方式，端口应正确输出，返回值正确" status="run" classname="TestAout" time="10.266"/>
    <testcase name="TEST_AOUT_HDMIOUT" description="测试CHDRV_AOUT_SetHDMIOutMode设置为压缩和非压缩方式，端口应能正确输出，返回值正确" status="run" classname="TestAout" time="12.494">
      <failure message="Value of: test_input_yes()&#x0A;  Actual: 1(0x1)&#x0A;Expected: (1) - rb_CompressMode&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_aout.cpp:339<br />
Value of: test_input_yes()<br />
  Actual: 1(0x1)<br />
Expected: (1) - rb_CompressMode<br />
Which is: 0(0x0)]]></failure>
    </testcase>
    <testcase name="TEST_AOUT_CLOSE" description="测试CHDRV_AOUT_Close删除句柄，返回值正确" status="run" classname="TestAout" time="0.049"/>
  </testsuite>
  <testsuite name="TestVout" tests="25/25" failures="0" disabled="0" errors="0" time="0">
    <testcase name="VOUT_VOUT_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestVout" time="0.024"/>
    <testcase name="VOUT_VOUT_INIT2" description="测试模块是否可被销毁" status="run" classname="TestVout" time="0.024"/>
    <testcase name="VOUT_VOUT_INIT3" description="测试CHDRV_VOUT_GetVersion是否成功" status="run" classname="TestVout" time="0.027"/>
    <testcase name="VOUT_VOUT_Open" description="测试CHDRV_VOUT_Open错误参数" status="run" classname="TestVout" time="0.032"/>
    <testcase name="VOUT_VOUT_FORMAT" description="测试CHDRV_VOUT_SetFormat错误参数测试" status="run" classname="TestVout" time="0.024"/>
    <testcase name="VOUT_VOUT_ENCODER2" description="测试CHDRV_VOUT_GetEncoderState错误参数" status="run" classname="TestVout" time="0.024"/>
    <testcase name="VOUT_VOUT_DISPLAY" description="测试CHDRV_VOUT_SetLayerDisplay和GetLayerDisplay错误参数" status="run" classname="TestVout" time="0.024"/>
    <testcase name="VOUT_VOUT_PRIORITY" description="测试CHDRV_VOUT_SetLayerPriority和GetLayerPriority错误参数测试" status="run" classname="TestVout" time="0.024"/>
    <testcase name="VOUT_VOUT_BRIGHTNESS" description="测试CHDRV_VOUT_SetBrightness和GetBrightness错误参数" status="run" classname="TestVout" time="0.024"/>
    <testcase name="VOUT_VOUT_CONTRAST" description="测试CHDRV_VOUT_SetContrast和GetContrast错误参数" status="run" classname="TestVout" time="0.024"/>
    <testcase name="VOUT_VOUT_SATURATION" description="测试CHDRV_VOUT_SetSaturation和GetSaturation错误参数" status="run" classname="TestVout" time="0.024"/>
    <testcase name="VOUT_VOUT_BGLAYERCOLOR" description="测试CHDRV_VOUT_SetBGLayerColor和GetBGLayerColor错误参数" status="run" classname="TestVout" time="0.024"/>
    <testcase name="VOUT_VOUT_ALPHA" description="测试CHDRV_VOUT_SetLayerAlpha和GetLayerAlpha错误参数" status="run" classname="TestVout" time="0.024"/>
    <testcase name="VOUT_VOUT_CAPTURE" description="测试CHDRV_VOUT_Capture2OSD错误参数" status="run" classname="TestVout" time="0.024"/>
    <testcase name="VOUT_VOUT_OPEN_1" description="测试参数为pathid=0，osd1，osd2，video1为有效的CHDRV_VOUT_Open，返回值应正确，handle不为NULL" status="run" classname="TestVout" time="0.024"/>
    <testcase name="VOUT_VOUT_ONOFF_1" description="测试CHDRV_VOUT_OnOff将osd1，osd2和video1设置为on，应返回OK" status="run" classname="TestVout" time="0.053"/>
    <testcase name="VOUT_VOUT_SETPORT_1" description="测试CHDRV_VOUT_SetPort将CVBS|HDMI|YPBPR均设置为可见，返回值应正确。从对应输出接口应能看到输出" status="run" classname="TestVout" time="0.064"/>
    <testcase name="VOUT_VOUT_ONOFF_2" description="测试CHDRV_VOUT_OnOff将osd1，osd2和video1其中1~2项设置为off，应返回OK；屏幕上能立刻看到被off的层不可见" status="run" classname="TestVout" time="11.181"/>
    <testcase name="VOUT_VOUT_SETPORT_2" description="测试CHDRV_VOUT_SetPort将CVBS|HDMI|YPBPR其中1~2项设置为off，应返回ok；被off的端口应立刻无输出;GET PORT应与set的一致" status="run" classname="TestVout" time="4.599">
      <failure message="Value of: rstru_OutputPortGet.b_IsSDCvbs&#x0A;  Actual: 1(0x1)&#x0A;Expected: (0)&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_vout.cpp:539<br />
Value of: rstru_OutputPortGet.b_IsSDCvbs<br />
  Actual: 1(0x1)<br />
Expected: (0)<br />
Which is: 0(0x0)]]></failure>
    </testcase>
    <testcase name="VOUT_VOUT_SETFORMAT" description="测试CHDRV_VOUT_SetFormat所支持的格式后应返回OK，屏幕上能看到模式切换成功，OSD正常；GetFormat是否返回是否和当前格式一致" status="run" classname="TestVout" time="73.354">
      <failure message="Value of: test_input_yes()&#x0A;  Actual: 0(0x0)&#x0A;Expected: (1)&#x0A;Which is: 1(0x1)&#x0A;HDMI切换分辨率VOUT_FMT_HD_720P60_SUPPORT失败" type=""><![CDATA[gtest/case/module/test_vout.cpp:608<br />
Value of: test_input_yes()<br />
  Actual: 0(0x0)<br />
Expected: (1)<br />
Which is: 1(0x1)<br />
HDMI切换分辨率VOUT_FMT_HD_720P60_SUPPORT失败]]></failure>
    </testcase>
    <testcase name="VOUT_VOUT_SETLAYER_DISPLAY_1" description="测试CHDRV_VOUT_SetLayerDisplay函数设置osd1，osd2和video1为可见，应返回OK；GetLayerDisplay获取到的vout状态应该和当前设置一样" status="run" classname="TestVout" time="0.096"/>
    <testcase name="VOUT_VOUT_SETBRIGHTNESS" description="测试CHDRV_VOUT_SetBrightness设置不同的亮度能够观察视频亮度变化，错误参数亮度不变化，正确设置的参数不会被改变；GetBrightness获取正确亮度值" status="run" classname="TestVout" time="4.859"/>
    <testcase name="VOUT_VOUT_SETCONTRAST" description="测试CHDRV_VOUT_SetContrast设置不同的对比度值能够观察视频变化，错误参数不变化，正确设置的参数不会被改变；GetContrast能够正确获取对比度值" status="run" classname="TestVout" time="3.837"/>
    <testcase name="VOUT_VOUT_SETSATURATION" description="测试CHDRV_VOUT_SetSaturation设置不同的饱和度能够观察视频变化，错误参数不变化，正确设置的参数不会被改变;GetSaturation获取到的饱和度值正确" status="run" classname="TestVout" time="3.977"/>
    <testcase name="VOUT_VOUT_SETLAYER_DISPLAY_2" description="测试CHDRV_VOUT_SetLayerDisplay函数设置osd1，osd2和video1其中1~2项为不可见，应返回OK；屏幕上应能立刻看到不可见的层被隐藏。GetLayerDisplay获取到的vout状态应该和当前设置一致" status="run" classname="TestVout" time="6.932"/>
  </testsuite>
  <testsuite name="TestFp" tests="7/7" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_FP_LED1" description="测试LED灯闪烁" status="run" classname="TestFp" time="0"/>
    <testcase name="TEST_FP_LED2" description="测试数码管显示88:88" status="run" classname="TestFp" time="0"/>
    <testcase name="TEST_FP_LED3" description="测试数码管显示0000" status="run" classname="TestFp" time="0"/>
    <testcase name="TEST_FP_LED4" description="测试数码管无显示" status="run" classname="TestFp" time="0"/>
    <testcase name="TEST_FP_LED5" description="测试数码管显示任意字符串" status="run" classname="TestFp" time="0"/>
    <testcase name="TEST_FP_IR1" description="测试FP按键回调" status="run" classname="TestFp" time="5.076"/>
    <testcase name="TEST_FP_IR2" description="测试主动读取按键CHDRV_FP_GetKey()" status="run" classname="TestFp" time="1.557"/>
  </testsuite>
  <testsuite name="TestIIC" tests="3/3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_IIC_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestIIC" time="0"/>
    <testcase name="TEST_IIC_INIT2" description="测试模块是否可被销毁" status="run" classname="TestIIC" time="0.005"/>
    <testcase name="TEST_IIC_INIT3" description="测试CHDRV_IIC_GetVersion是否成功" status="run" classname="TestIIC" time="0.003"/>
  </testsuite>
  <testsuite name="TestSection" tests="54/54" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_SECTION_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestSection" time="0"/>
    <testcase name="TEST_SECTION_INIT2" description="测试模块是否可被销毁" status="run" classname="TestSection" time="0"/>
    <testcase name="TEST_SECTION_INIT3" description="测试CHDRV_SECTION_GetVersion是否成功" status="run" classname="TestSection" time="0.002"/>
    <testcase name="CHDRV_SECTION_PARAMS1" description="CHDRV_SECTION_AllocChannel错误参数测试" status="run" classname="TestSection" time="0.04">
      <failure message="Value of: CHDRV_SECTION_AllocChannel ((0), (0x01), __null, &amp;h_Channel, (2048))&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_SECTION_INVALID_PARAM&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_section.cpp:164<br />
Value of: CHDRV_SECTION_AllocChannel ((0), (0x01), __null, &h_Channel, (2048))<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_SECTION_INVALID_PARAM<br />
Which is: 3(0x3)]]></failure>
    </testcase>
    <testcase name="CHDRV_SECTION_PARAMS2" description="CHDRV_SECTION_FreeChannel错误参数测试" status="run" classname="TestSection" time="0.004"/>
    <testcase name="CHDRV_SECTION_PARAMS3" description="CHDRV_SECTION_StopChannel错误参数测试" status="run" classname="TestSection" time="0.004"/>
    <testcase name="CHDRV_SECTION_PARAMS4" description="CHDRV_SECTION_FlushChannelBuffer错误参数测试" status="run" classname="TestSection" time="0"/>
    <testcase name="CHDRV_SECTION_PARAMS5" description="CHDRV_SECTION_SetChannelPid错误参数测试" status="run" classname="TestSection" time="0.009"/>
    <testcase name="CHDRV_SECTION_PARAMS6" description="CHDRV_SECTION_AllocFilter错误参数测试" status="run" classname="TestSection" time="0.014"/>
    <testcase name="CHDRV_SECTION_PARAMS7" description="CHDRV_SECTION_FreeFilter错误参数测试" status="run" classname="TestSection" time="0.004"/>
    <testcase name="CHDRV_SECTION_PARAMS8" description="CHDRV_SECTION_AssociateFilterToChannel错误参数测试" status="run" classname="TestSection" time="0.012"/>
    <testcase name="CHDRV_SECTION_PARAMS9" description="CHDRV_SECTION_DisAssociateFilterToChannel错误参数测试" status="run" classname="TestSection" time="0.012"/>
    <testcase name="CHDRV_SECTION_PARAMS10" description="CHDRV_SECTION_SetFilter错误参数测试" status="run" classname="TestSection" time="0.049">
      <failure message="Value of: CHDRV_SECTION_SetFilter(h_Filter, uc_Data, uc_Mask, uc_Pattern, (8), (3))&#x0A;  Actual: 7(0x7)&#x0A;Expected: CHDRV_SECTION_INVALID_PARAM&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_section.cpp:255<br />
Value of: CHDRV_SECTION_SetFilter(h_Filter, uc_Data, uc_Mask, uc_Pattern, (8), (3))<br />
  Actual: 7(0x7)<br />
Expected: CHDRV_SECTION_INVALID_PARAM<br />
Which is: 3(0x3)]]></failure>
    </testcase>
    <testcase name="CHDRV_SECTION_PARAMS11" description="CHDRV_SECTION_StartFilter错误参数测试" status="run" classname="TestSection" time="0.005"/>
    <testcase name="CHDRV_SECTION_PARAMS12" description="CHDRV_SECTION_StopFilter错误参数测试" status="run" classname="TestSection" time="0.005"/>
    <testcase name="CHDRV_SECTION_PARAMS13" description="CHDRV_SECTION_ReadFilterData错误参数测试" status="run" classname="TestSection" time="0.015">
      <failure message="Value of: 1&#x0A;  Actual: 1(0x1)&#x0A;Expected: dead_test&#x0A;Which is: 0(0x0)&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_section.cpp:287<br />
Value of: 1<br />
  Actual: 1(0x1)<br />
Expected: dead_test<br />
Which is: 0(0x0)<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="CHDRV_SECTION_PARAMS14" description="CHDRV_SECTION_GetInfo错误参数测试" status="run" classname="TestSection" time="0.021">
      <failure message="Value of: CHDRV_SECTION_GetInfo((5), (CHDRV_SECTION_INFO_TYPE_e)(2), &amp;Param)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_SECTION_INVALID_PARAM&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_section.cpp:299<br />
Value of: CHDRV_SECTION_GetInfo((5), (CHDRV_SECTION_INFO_TYPE_e)(2), &Param)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_SECTION_INVALID_PARAM<br />
Which is: 3(0x3)]]></failure>
    </testcase>
    <testcase name="CHDRV_SECTION_PARAMS15" description="CHDRV_SECTION_FindChannelByPID错误参数测试" status="run" classname="TestSection" time="0"/>
    <testcase name="CHDRV_SECTION_PARAMS16" description="CHDRV_SECTION_ModifyChannelCrcControl错误参数测试" status="run" classname="TestSection" time="0.02">
      <failure message="Value of: CHDRV_SECTION_ModifyChannelCrcControl(h_Channel, (3))&#x0A;  Actual: 7(0x7)&#x0A;Expected: CHDRV_SECTION_INVALID_PARAM&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_section.cpp:319<br />
Value of: CHDRV_SECTION_ModifyChannelCrcControl(h_Channel, (3))<br />
  Actual: 7(0x7)<br />
Expected: CHDRV_SECTION_INVALID_PARAM<br />
Which is: 3(0x3)]]></failure>
    </testcase>
    <testcase name="CHDRV_SECTION_CHANNEL1" description="测试能否以合法参数成功创建一个channel" status="run" classname="TestSection" time="30.626"/>
    <testcase name="CHDRV_SECTION_CHANNEL2" description="设置TEST_SECTION_CHANNEL1中创建的channel pid为其他值" status="run" classname="TestSection" time="0.005"/>
    <testcase name="TEST_SECTION_FILTER1" description="以合法参数创建2个filter" status="run" classname="TestSection" time="0"/>
    <testcase name="TEST_SECTION_FILTER3" description="分别设置2个filter的过滤条件" status="run" classname="TestSection" time="0.014"/>
    <testcase name="TEST_SECTION_FILTER4" description="将刚刚创建的第1个filter关联到上面创建的channel上" status="run" classname="TestSection" time="0.001"/>
    <testcase name="CHDRV_SECTION_CHANNEL3" description="分别以参数channel pid 和 (channel pid + 1)调用CHDRV_SECTION_FindChannelByPID" status="run" classname="TestSection" time="0.021">
      <failure message="Expected: (CHDRV_SECTION_OK) != (CHDRV_SECTION_FindChannelByPID(us_ChannelPid + 1, &amp;h_Channel)), actual: 0(0x0) vs 0(0x0)" type=""><![CDATA[gtest/case/module/test_section.cpp:594<br />
Expected: (CHDRV_SECTION_OK) != (CHDRV_SECTION_FindChannelByPID(us_ChannelPid + 1, &h_Channel)), actual: 0(0x0) vs 0(0x0)]]></failure>
    </testcase>
    <testcase name="TEST_SECTION_FILTER5" description="start filter1" status="run" classname="TestSection" time="0"/>
    <testcase name="CHDRV_SECTION_CHANNEL5" description="等待1S，检查callback内应收不到任何数据" status="run" classname="TestSection" time="1.177">
      <failure message="Expected: (CHDRV_SECTION_EVENT_DATA_DETECT) != (gstru_GlobalVariable.enm_Event), actual: 0(0x0) vs 0(0x0)&#x0A;还未start filter，不应收到数据0" type=""><![CDATA[gtest/case/module/test_section.cpp:614<br />
Expected: (CHDRV_SECTION_EVENT_DATA_DETECT) != (gstru_GlobalVariable.enm_Event), actual: 0(0x0) vs 0(0x0)<br />
还未start filter，不应收到数据0]]></failure>
    </testcase>
    <testcase name="CHDRV_SECTION_CHANNEL4" description="调用start channel" status="run" classname="TestSection" time="0"/>
    <testcase name="TEST_SECTION_FILTER6" description="等待1S，检查callback内应有数据到来。调用section_read应能读到数据，数据长度合法" status="run" classname="TestSection" time="0"/>
    <testcase name="TEST_SECTION_FILTER7" description="stop filter 1" status="run" classname="TestSection" time="0.001"/>
    <testcase name="TEST_SECTION_FILTER5_1" description="将刚刚创建的第2个filter关联到上面创建的channel上" status="run" classname="TestSection" time="0"/>
    <testcase name="CHDRV_SECTION_CHANNEL4_1" description="分别以参数channel pid 和 (channel pid + 1)调用CHDRV_SECTION_FindChannelByPID" status="run" classname="TestSection" time="0.021">
      <failure message="Expected: (CHDRV_SECTION_OK) != (CHDRV_SECTION_FindChannelByPID(us_ChannelPid + 1, &amp;h_Channel)), actual: 0(0x0) vs 0(0x0)" type=""><![CDATA[gtest/case/module/test_section.cpp:668<br />
Expected: (CHDRV_SECTION_OK) != (CHDRV_SECTION_FindChannelByPID(us_ChannelPid + 1, &h_Channel)), actual: 0(0x0) vs 0(0x0)]]></failure>
    </testcase>
    <testcase name="TEST_SECTION_FILTER6_1" description="start filter1" status="run" classname="TestSection" time="0"/>
    <testcase name="CHDRV_SECTION_CHANNEL6" description="等待1S，检查callback内应收不到任何数据" status="run" classname="TestSection" time="1.18">
      <failure message="Expected: (CHDRV_SECTION_EVENT_DATA_DETECT) != (gstru_GlobalVariable.enm_Event), actual: 0(0x0) vs 0(0x0)&#x0A;还未start filter，不应收到数据0" type=""><![CDATA[gtest/case/module/test_section.cpp:689<br />
Expected: (CHDRV_SECTION_EVENT_DATA_DETECT) != (gstru_GlobalVariable.enm_Event), actual: 0(0x0) vs 0(0x0)<br />
还未start filter，不应收到数据0]]></failure>
    </testcase>
    <testcase name="CHDRV_SECTION_CHANNEL5_1" description="调用start channel" status="run" classname="TestSection" time="0"/>
    <testcase name="TEST_SECTION_FILTER7_1" description="等待1S，检查callback内应有数据到来。调用section_read应能读到数据，数据长度合法" status="run" classname="TestSection" time="0"/>
    <testcase name="TEST_SECTION_FILTER8" description="stop filter 1" status="run" classname="TestSection" time="0"/>
    <testcase name="TEST_SECTION_FILTER9" description="清空数据包计数器，等待1S，检查callback内应收不到任何数据" status="run" classname="TestSection" time="1"/>
    <testcase name="TEST_SECTION_FILTER10" description="start filter2" status="run" classname="TestSection" time="0.015"/>
    <testcase name="TEST_SECTION_FILTER11" description="等待1S，检查callback内应有数据到来。调用section_read应能读到数据，数据长度合法" status="run" classname="TestSection" time="0.001"/>
    <testcase name="TEST_SECTION_FILTER12" description="stop filter 2" status="run" classname="TestSection" time="0"/>
    <testcase name="TEST_SECTION_FILTER13" description="清空数据包计数器，等待1S，检查callback内应收不到任何数据" status="run" classname="TestSection" time="1"/>
    <testcase name="TEST_SECTION_FILTER14" description="start filter1,start filter2" status="run" classname="TestSection" time="0"/>
    <testcase name="TEST_SECTION_FILTER15" description="等待1S，检查callback应有数据到来" status="run" classname="TestSection" time="1"/>
    <testcase name="TEST_SECTION_FILTER16" description="stop filter 1,stop filter 2" status="run" classname="TestSection" time="0.001"/>
    <testcase name="TEST_SECTION_FILTER17" description="清空数据包计数器，等待1S，检查callback内应收不到任何数据" status="run" classname="TestSection" time="1"/>
    <testcase name="TEST_SECTION_FILTER18" description="切换到无效频点，然后start filter1，start filter2" status="run" classname="TestSection" time="4.191"/>
    <testcase name="TEST_SECTION_FILTER19" description="等待1S后，然后调用flush channel" status="run" classname="TestSection" time="1"/>
    <testcase name="TEST_SECTION_FILTER20" description="调用read sectioin，应返回NO_DATA" status="run" classname="TestSection" time="0"/>
    <testcase name="TEST_SECTION_FILTER21" description="恢复到有效频点，继续测试。Stop filter1，stop filter2，stop channel" status="run" classname="TestSection" time="1.89"/>
    <testcase name="TEST_SECTION_FILTER22" description="取消2个filter与channel的关联" status="run" classname="TestSection" time="0.018"/>
    <testcase name="TEST_SECTION_FILTER23" description="测试crc set是否生效,当crccheck为true时,应收不到ECM;当为false时,能收到" status="run" classname="TestSection" time="10.026"/>
    <testcase name="TEST_SECTION_FILTER24" description="SECTION性能测试，统计收到的所有section个数跟预期的数量一致" status="run" classname="TestSection" time="323.041">
      <failure message="Expected: (fw_getenv_i(c_string.c_str())) &gt;= (gstru_GlobalVariable.i_Section_Nums), actual: 31176(0x79c8) vs 31288(0x7a38)&#x0A;接收包数量超过码流中实际包数量" type=""><![CDATA[gtest/case/module/test_section.cpp:1083<br />
Expected: (fw_getenv_i(c_string.c_str())) >= (gstru_GlobalVariable.i_Section_Nums), actual: 31176(0x79c8) vs 31288(0x7a38)<br />
接收包数量超过码流中实际包数量]]></failure>
    </testcase>
    <testcase name="TEST_SECTION_FILTER25" description="如果dmx个数大于1，重复上述测试" status="run" classname="TestSection" time="0.001"/>
  </testsuite>
  <testsuite name="TestFsys" tests="82/82" failures="0" disabled="0" errors="0" time="0">  
    <testcase name="TEST_FSYS_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_INIT2" description="测试模块是否可被销毁" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_INIT3" description="测试CH_FSYS_GetVersion是否成功" status="run" classname="TestFsys" time="0.003"/>
    <testcase name="TEST_FSYS_PARAMS1" description="CH_FSYS_OpenFile错误参数测试" status="run" classname="TestFsys" time="0.008"/>
    <testcase name="TEST_FSYS_PARAMS2" description="CH_FSYS_CloseFile错误参数测试" status="run" classname="TestFsys" time="0.008"/>
    <testcase name="TEST_FSYS_PARAMS3" description="CH_FSYS_DeleteFile错误参数测试" status="run" classname="TestFsys" time="0.005"/>
    <testcase name="TEST_FSYS_PARAMS4" description="CH_FSYS_MoveFile错误参数测试" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_PARAMS7" description="CH_FSYS_ReadFile错误参数测试" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_PARAMS8" description="CH_FSYS_WriteFile错误参数测试" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_PARAMS9" description="CH_FSYS_RenameFile错误参数测试" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_PARAMS10" description="CH_FSYS_SeekFile错误参数测试" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_PARAMS11" description="CH_FSYS_TellFile错误参数测试" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_PARAMS12" description="CH_FSYS_FileIsEOF错误参数测试" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_PARAMS13" description="CH_FSYS_ResizeFile错误参数测试" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_PARAMS14" description="CH_FSYS_GetFileInfo错误参数测试" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_PARAMS15" description="CH_FSYS_GetFileInfoEx错误参数测试" status="run" classname="TestFsys" time="0.001"/>
    <testcase name="TEST_FSYS_PARAMS16" description="CH_FSYS_GetFileAndDirNumber错误参数测试" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_PARAMS17" description="CH_FSYS_OpenDir错误参数测试" status="run" classname="TestFsys" time="0.004"/>
    <testcase name="TEST_FSYS_PARAMS18" description="CH_FSYS_CloseDir错误参数测试" status="run" classname="TestFsys" time="0.004"/>
    <testcase name="TEST_FSYS_PARAMS19" description="CH_FSYS_ReadDir错误参数测试" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_PARAMS20" description="CH_FSYS_RewindDir错误参数测试" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_PARAMS21" description="CH_FSYS_CreateDir错误参数测试" status="run" classname="TestFsys" time="0"/>
    <testcase name="TEST_FSYS_PARAMS22" description="CH_FSYS_DeleteDir错误参数测试" status="run" classname="TestFsys" time="0.009">
      <failure message="Failed&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_fsys.cpp:706<br />
Failed<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_FSYS_PARAMS23" description="CH_FSYS_RenameDir错误参数测试" status="run" classname="TestFsys" time="0.009">
      <failure message="Failed&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_fsys.cpp:719<br />
Failed<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_FSYS_PARAMS24" description="CH_FSYS_GetDirInfo错误参数测试" status="run" classname="TestFsys" time="0.001"/>
    <testcase name="TEST_FSYS_PARAMS25" description="CH_FSYS_Format错误参数测试" status="run" classname="TestFsys" time="0.01">
      <failure message="Failed&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_fsys.cpp:743<br />
Failed<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_FSYS_PARAMS26" description="CH_FSYS_GetPartitionList错误参数测试" status="run" classname="TestFsys" time="0.009">
      <failure message="Failed&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_fsys.cpp:760<br />
Failed<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_FSYS_PARAMS27" description="CH_FSYS_InstallCallback错误参数测试" status="run" classname="TestFsys" time="0.009">
      <failure message="Failed&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_fsys.cpp:774<br />
Failed<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_FSYS_PARAMS28" description="CH_FSYS_UninstallCallback错误参数测试" status="run" classname="TestFsys" time="0.009">
      <failure message="Failed&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_fsys.cpp:786<br />
Failed<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_FSYS_CALL1" description="注册3个回调函数，均应返回成功" status="run" classname="TestFsys" time="0.012"/>
    <testcase name="TEST_FSYS_CALL2" description="提示用户插入/拔除U盘，3个回调函数均应收到正确的通知" status="run" classname="TestFsys" time="9.971"/>
    <testcase name="TEST_FSYS_DIR2" description="在刚创建的文件夹内递归创建文件夹,能否创建30个" status="run" classname="TestFsys" time="0.305"/>
    <testcase name="TEST_FSYS_DIR3" description="调用delete dir删除TEST_FSYS_DIR1中创建的文件夹" status="run" classname="TestFsys" time="0.333"/>
    <testcase name="TEST_FSYS_FILE1" description="调用create dir创建一个文件夹，并在该文件夹中open file创建一个文件" status="run" classname="TestFsys" time="0.018"/>
    <testcase name="TEST_FSYS_FILE2" description="rename file重命名该文件,get fileInfo能获取到重命名后的文件信息" status="run" classname="TestFsys" time="0.016"/>
    <testcase name="TEST_FSYS_FILE3" description="在刚创建的文件夹内递归创建文件200个,能够成功" status="run" classname="TestFsys" time="0.387"/>
    <testcase name="TEST_FSYS_FILE4" description="调用get DirInfo获取刚创建的所有文件信息" status="run" classname="TestFsys" time="0.007"/>
    <testcase name="TEST_FSYS_FILE5" description="调用delete dir删除TEST_FSYS_FILE1中创建的文件夹" status="run" classname="TestFsys" time="0.055"/>
    <testcase name="TEST_FSYS_FILE6" description="调用open file创建一个文件，通过write file往文件中写入100M数据" status="run" classname="TestFsys" time="6.3"/>
    <testcase name="TEST_FSYS_FILE8" description="seek file移动指针到文件末尾,tell file判断当前文件指针位置是否在末尾" status="run" classname="TestFsys" time="0.249">
      <failure message="Value of: CH_FSYS_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_FSYS_SeekFile(gh_fileHandle[0], l_offset, CH_FSYS_SEEK_END)&#x0A;Which is: 1(0x1)" type=""><![CDATA[gtest/case/module/test_fsys.cpp:1043<br />
Value of: CH_FSYS_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_FSYS_SeekFile(gh_fileHandle[0], l_offset, CH_FSYS_SEEK_END)<br />
Which is: 1(0x1)]]></failure>
      <failure message="Value of: 1024 * 256*400+1024 * 256&#x0A;  Actual: 105119744(0x6440000)&#x0A;Expected: CHS64_GetLowValue(l_offset)&#x0A;Which is: 105381888(0x6480000)" type=""><![CDATA[gtest/case/module/test_fsys.cpp:1048<br />
Value of: 1024 * 256*400+1024 * 256<br />
  Actual: 105119744(0x6440000)<br />
Expected: CHS64_GetLowValue(l_offset)<br />
Which is: 105381888(0x6480000)]]></failure>
      <failure message="Value of: CH_FSYS_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_FSYS_SeekFile(gh_fileHandle[0], l_offset, CH_FSYS_SEEK_END)&#x0A;Which is: 5(0x5)" type=""><![CDATA[gtest/case/module/test_fsys.cpp:1052<br />
Value of: CH_FSYS_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_FSYS_SeekFile(gh_fileHandle[0], l_offset, CH_FSYS_SEEK_END)<br />
Which is: 5(0x5)]]></failure>
      <failure message="Value of: 1024 * 256*400+1024 * 256 * 2&#x0A;  Actual: 105381888(0x6480000)&#x0A;Expected: CHS64_GetLowValue(l_offset)&#x0A;Which is: 105906176(0x6500000)" type=""><![CDATA[gtest/case/module/test_fsys.cpp:1058<br />
Value of: 1024 * 256*400+1024 * 256 * 2<br />
  Actual: 105381888(0x6480000)<br />
Expected: CHS64_GetLowValue(l_offset)<br />
Which is: 105906176(0x6500000)]]></failure>
    </testcase>
    <testcase name="TEST_FSYS_FILE9" description="seek file移动指针到文件开头,tell file判断当前文件指针位置是否在文件头" status="run" classname="TestFsys" time="0.041"/>
    <testcase name="TEST_FSYS_FILE10" description="CH_FSYS_SeekFile移动指针到一指定位置，tell file判断当前文件指针是否在该位置" status="run" classname="TestFsys" time="0.021"/>
    <testcase name="TEST_FSYS_FILE7" description="get fileInfo获取到到该文件的信息" status="run" classname="TestFsys" time="0.017">
      <failure message="Value of: 1024 * 256 * 402&#x0A;  Actual: 105381888(0x6480000)&#x0A;Expected: ui_length&#x0A;Which is: 105906176(0x6500000)" type=""><![CDATA[gtest/case/module/test_fsys.cpp:1133<br />
Value of: 1024 * 256 * 402<br />
  Actual: 105381888(0x6480000)<br />
Expected: ui_length<br />
Which is: 105906176(0x6500000)]]></failure>
    </testcase>
    <testcase name="TEST_FSYS_FILE11" description="delete file删除该文件" status="run" classname="TestFsys" time="0.047"/>
    <testcase name="TEST_FSYS_FILE_RW1" description="调用open file创建一个文件，创建方式分别为w,wb,w+，通过write file往文件中写入100M数据" status="run" classname="TestFsys" time="19.177"/>
    <testcase name="TEST_FSYS_FILE_RW2" description="调用open file创建另一个文件，创建方式分别为w,wb,w+，通过read file（打开方式分别为r,rb,r+）将上一个文件中的内容读出到该文件" status="run" classname="TestFsys" time="50.22"/>
    <testcase name="TEST_FSYS_FILE_RW3" description="比较2个文件中的内容是否一致，判断读写是否成功" status="run" classname="TestFsys" time="22.128"/>
    <testcase name="TEST_FSYS_FILE_RW4" description="delete file删除文件" status="run" classname="TestFsys" time="0.381"/>
    <testcase name="TEST_FSYS_FILE_RW5" description="测试所有的读写方式是否符合预期" status="run" classname="TestFsys" time="0.555">
      <failure message="Expected: (h_file = CH_FSYS_OpenFile((S8*)(&quot;C:/example1.txt&quot;), (S8*)(puc_mod[i]))) != (__null), actual: 0(0x0) vs 0(0x0)&#x0A;以模式rb+打开文件失败&#x0A;" type=""><![CDATA[gtest/case/module/test_fsys.cpp:1404<br />
Expected: (h_file = CH_FSYS_OpenFile((S8*)("C:/example1.txt"), (S8*)(puc_mod[i]))) != (__null), actual: 0(0x0) vs 0(0x0)<br />
以模式rb+打开文件失败<br />
]]></failure>
      <failure message="Expected: (h_file = CH_FSYS_OpenFile((S8*)(&quot;C:/example1.txt&quot;), (S8*)(puc_mod[i]))) != (__null), actual: 0(0x0) vs 0(0x0)&#x0A;以模式wb+打开文件失败&#x0A;" type=""><![CDATA[gtest/case/module/test_fsys.cpp:1404<br />
Expected: (h_file = CH_FSYS_OpenFile((S8*)("C:/example1.txt"), (S8*)(puc_mod[i]))) != (__null), actual: 0(0x0) vs 0(0x0)<br />
以模式wb+打开文件失败<br />
]]></failure>
      <failure message="Expected: (h_file = CH_FSYS_OpenFile((S8*)(&quot;C:/example1.txt&quot;), (S8*)(puc_mod[i]))) != (__null), actual: 0(0x0) vs 0(0x0)&#x0A;以模式wa打开文件失败&#x0A;" type=""><![CDATA[gtest/case/module/test_fsys.cpp:1404<br />
Expected: (h_file = CH_FSYS_OpenFile((S8*)("C:/example1.txt"), (S8*)(puc_mod[i]))) != (__null), actual: 0(0x0) vs 0(0x0)<br />
以模式wa打开文件失败<br />
]]></failure>
      <failure message="Expected: (h_file = CH_FSYS_OpenFile((S8*)(&quot;C:/example1.txt&quot;), (S8*)(puc_mod[i]))) != (__null), actual: 0(0x0) vs 0(0x0)&#x0A;以模式ab打开文件失败&#x0A;" type=""><![CDATA[gtest/case/module/test_fsys.cpp:1404<br />
Expected: (h_file = CH_FSYS_OpenFile((S8*)("C:/example1.txt"), (S8*)(puc_mod[i]))) != (__null), actual: 0(0x0) vs 0(0x0)<br />
以模式ab打开文件失败<br />
]]></failure>
    </testcase>
    <testcase name="TEST_FSYS_FILE_RW6" description="测试在写入文件的过程中拔掉U盘，不应死机" status="run" classname="TestFsys" time="66.314"/>
    <testcase name="TEST_FSYS_FILE_RW7" description="测试在读取过程中拔掉U盘，不应死机" status="run" classname="TestFsys" time="18.683"/>
  </testsuite>
  <testsuite name="TestVwindow" tests="24/24" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_VWINDOW_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestVwindow" time="0.039"/>
    <testcase name="TEST_VWINDOW_INIT2" description="测试模块是否可被销毁" status="run" classname="TestVwindow" time="0.039"/>
    <testcase name="TEST_VWINDOW_INIT3" description="测试CHDRV_VWINDOW_GetVersion是否成功" status="run" classname="TestVwindow" time="0.042"/>
    <testcase name="TEST_VWINDOW_PARAMS_OPEN" description="测试CHDRV_VWINDOW_Open错误参数测试" status="run" classname="TestVwindow" time="0.051"/>
    <testcase name="TEST_VWINDOW_PARAMS_RECT" description="测试CHDRV_VWINDOW_SetRect/GetRect错误参数测试" status="run" classname="TestVwindow" time="0.039"/>
    <testcase name="TEST_VWINDOW_PARAMS_RECT_EX" description="测试CHDRV_VWINDOW_SetRect/GetRect错误参数测试" status="run" classname="TestVwindow" time="0.039"/>
    <testcase name="TEST_VWINDOW_PARAMS_GAMMA" description="测试CHDRV_VWINDOW_SetAlphaGamma/GetAlphaGamma错误参数测试" status="run" classname="TestVwindow" time="0.04"/>
    <testcase name="TEST_VWINDOW_PARAMS_IOAREA" description="CHDRV_VWINDOW_SetIOArea错误参数测试" status="run" classname="TestVwindow" time="2.406">
      <failure message="Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&amp;rpstru_Area2,&amp;rpstru_Area1)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VWINDOW_INVALID_PARAM&#x0A;Which is: 4(0x4)&#x0A;input(-1,0,200,200),output(0,0,200,200)" type=""><![CDATA[gtest/case/module/test_vwindow.cpp:238<br />
Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&rpstru_Area2,&rpstru_Area1)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VWINDOW_INVALID_PARAM<br />
Which is: 4(0x4)<br />
input(-1,0,200,200),output(0,0,200,200)]]></failure>
      <failure message="Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&amp;rpstru_Area3,&amp;rpstru_Area1)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VWINDOW_INVALID_PARAM&#x0A;Which is: 4(0x4)&#x0A;input(0,-1,200,200),output(0,0,200,200)" type=""><![CDATA[gtest/case/module/test_vwindow.cpp:240<br />
Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&rpstru_Area3,&rpstru_Area1)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VWINDOW_INVALID_PARAM<br />
Which is: 4(0x4)<br />
input(0,-1,200,200),output(0,0,200,200)]]></failure>
      <failure message="Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&amp;rpstru_Area4,&amp;rpstru_Area1)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VWINDOW_INVALID_PARAM&#x0A;Which is: 4(0x4)&#x0A;input(0,0,-1,200),output(0,0,200,200)" type=""><![CDATA[gtest/case/module/test_vwindow.cpp:242<br />
Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&rpstru_Area4,&rpstru_Area1)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VWINDOW_INVALID_PARAM<br />
Which is: 4(0x4)<br />
input(0,0,-1,200),output(0,0,200,200)]]></failure>
      <failure message="Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&amp;rpstru_Area5,&amp;rpstru_Area1)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VWINDOW_INVALID_PARAM&#x0A;Which is: 4(0x4)&#x0A;input(0,0,200,-1),output(0,0,200,200)" type=""><![CDATA[gtest/case/module/test_vwindow.cpp:244<br />
Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&rpstru_Area5,&rpstru_Area1)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VWINDOW_INVALID_PARAM<br />
Which is: 4(0x4)<br />
input(0,0,200,-1),output(0,0,200,200)]]></failure>
      <failure message="Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&amp;rpstru_Area6,&amp;rpstru_Area1)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VWINDOW_INVALID_PARAM&#x0A;Which is: 4(0x4)&#x0A;input(1930,0,200,200),output(0,0,200,200)" type=""><![CDATA[gtest/case/module/test_vwindow.cpp:246<br />
Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&rpstru_Area6,&rpstru_Area1)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VWINDOW_INVALID_PARAM<br />
Which is: 4(0x4)<br />
input(1930,0,200,200),output(0,0,200,200)]]></failure>
      <failure message="Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&amp;rpstru_Area7,&amp;rpstru_Area1)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VWINDOW_INVALID_PARAM&#x0A;Which is: 4(0x4)&#x0A;input(0,1090,200,200),output(0,0,200,200)" type=""><![CDATA[gtest/case/module/test_vwindow.cpp:248<br />
Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&rpstru_Area7,&rpstru_Area1)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VWINDOW_INVALID_PARAM<br />
Which is: 4(0x4)<br />
input(0,1090,200,200),output(0,0,200,200)]]></failure>
      <failure message="Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&amp;rpstru_Area8,&amp;rpstru_Area1)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VWINDOW_INVALID_PARAM&#x0A;Which is: 4(0x4)&#x0A;input(0,0,1930,200),output(0,0,200,200)" type=""><![CDATA[gtest/case/module/test_vwindow.cpp:250<br />
Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&rpstru_Area8,&rpstru_Area1)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VWINDOW_INVALID_PARAM<br />
Which is: 4(0x4)<br />
input(0,0,1930,200),output(0,0,200,200)]]></failure>
      <failure message="Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&amp;rpstru_Area9,&amp;rpstru_Area1)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VWINDOW_INVALID_PARAM&#x0A;Which is: 4(0x4)&#x0A;input(0,0,200,1090),output(0,0,200,200)" type=""><![CDATA[gtest/case/module/test_vwindow.cpp:252<br />
Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&rpstru_Area9,&rpstru_Area1)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VWINDOW_INVALID_PARAM<br />
Which is: 4(0x4)<br />
input(0,0,200,1090),output(0,0,200,200)]]></failure>
      <failure message="Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&amp;rpstru_Area1,&amp;rpstru_Area4)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VWINDOW_INVALID_PARAM&#x0A;Which is: 4(0x4)&#x0A;input(0,0,200,200),output(0,0,-1,200)" type=""><![CDATA[gtest/case/module/test_vwindow.cpp:259<br />
Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&rpstru_Area1,&rpstru_Area4)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VWINDOW_INVALID_PARAM<br />
Which is: 4(0x4)<br />
input(0,0,200,200),output(0,0,-1,200)]]></failure>
      <failure message="Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&amp;rpstru_Area1,&amp;rpstru_Area5)&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VWINDOW_INVALID_PARAM&#x0A;Which is: 4(0x4)&#x0A;input(0,0,200,200),output(0,0,200,-1)" type=""><![CDATA[gtest/case/module/test_vwindow.cpp:261<br />
Value of: CHDRV_VWINDOW_SetIOArea(rh_WinHandle1,&rpstru_Area1,&rpstru_Area5)<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VWINDOW_INVALID_PARAM<br />
Which is: 4(0x4)<br />
input(0,0,200,200),output(0,0,200,-1)]]></failure>
    </testcase>
    <testcase name="TEST_VWINDOW_PARAMS_SHOW" description="测试CHDRV_VWINDOW_Show/Hide错误参数测试" status="run" classname="TestVwindow" time="0.048"/>
    <testcase name="TEST_VWINDOW_PARAMS_CLOSE" description="测试CHDRV_VWINDOW_Close错误参数测试" status="run" classname="TestVwindow" time="0.043"/>
    <testcase name="TEST_VWINDOW_OPEN" description="测试CHDRV_VWINDOW_Open功能是否正常，返回句柄不应为空" status="run" classname="TestVwindow" time="0.039"/>
    <testcase name="TEST_VWINDOW_SHOW" description="测试CHDRV_VWINDOW_Show，应返回成功，视频窗口可见" status="run" classname="TestVwindow" time="5.512"/>
    <testcase name="TEST_VWINDOW_SET_RECT_EX" description="测试SetRectEx（0,0,400,300）是否成功，视频位置是否正确" status="run" classname="TestVwindow" time="5.38"/>
    <testcase name="TEST_VWINDOW_GET_RECT_EX" description="测试GetRectEx获取的坐标是否与设置的一致" status="run" classname="TestVwindow" time="0.045"/>
    <testcase name="TEST_VWINDOW_RECT_EX_ERROR" description="测试当坐标位置超出左、上、右、下时，SetRectEx是否设置成功，视频位置是否正确，GetRectEx是否与设置的一致" status="run" classname="TestVwindow" time="7.064"/>
    <testcase name="TEST_VWINDOW_RECT_EX_LITTLE" description="测试rect width和hight分别小于5像素时，SetRectEx是否成功，视频显示是否正常，GetRectEx是否与设置的一致" status="run" classname="TestVwindow" time="3.664"/>
    <testcase name="TEST_VWINDOW_SET_RECT1" description="测试SetRect（0,0,400,300）是否成功，视频位置是否正确" status="run" classname="TestVwindow" time="4.399"/>
    <testcase name="TEST_VWINDOW_GET_RECT1" description="测试GetRect获取的坐标是否与设置的一致" status="run" classname="TestVwindow" time="0.045"/>
    <testcase name="TEST_VWINDOW_SET_RECT2" description="测试当坐标位置超出左、上、右、下时，SetRect是否设置成功，视频位置是否正确，GetRect是否与设置的一致" status="run" classname="TestVwindow" time="5.141"/>
    <testcase name="TEST_VWINDOW_RECT_LITTLE1" description="测试rect width和hight分别小于5像素时，SetRect是否成功，视频显示是否正常，GetRect是否与设置的一致" status="run" classname="TestVwindow" time="6.318"/>
    <testcase name="TEST_VWINDOW_HIDE1" description="测试CHDRV_VWINDOW_Hide,应返回成功，视频应不可见" status="run" classname="TestVwindow" time="5.805">
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;窗口隐藏无效" type=""><![CDATA[gtest/case/module/test_vwindow.cpp:684<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
窗口隐藏无效]]></failure>
    </testcase>
    <testcase name="TEST_VWINDOW_SHOW1" description="测试CHDRV_VWINDOW_SHOW,应返回成功，视频应可见" status="run" classname="TestVwindow" time="4.711"/>
    <testcase name="TEST_VWINDOW_SETIO_AREA" description="测试SetIOArea功能是否正常" status="run" classname="TestVwindow" time="8.231"/>
    <testcase name="TEST_VWINDOW_CLOSE" description="测试CHDRV_VWINDOW_Close返回值是否正确" status="run" classname="TestVwindow" time="0.044"/>
  </testsuite>
  <testsuite name="TestAvFilter" tests="12/12" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_AVFILTER_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestAvFilter" time="0"/>
    <testcase name="TEST_AVFILTER_INIT2" description="测试模块是否可被销毁" status="run" classname="TestAvFilter" time="0.001"/>
    <testcase name="TEST_AVFILTER_INIT3" description="测试CHDRV_AVFILTER_GetVersion是否成功" status="run" classname="TestAvFilter" time="0.003"/>
    <testcase name="TEST_AVFILTER_ALLOC" description="分别分配audio、video、pcr类型的filter，均应返回成功" status="run" classname="TestAvFilter" time="0.013"/>
    <testcase name="TEST_AVFILTER_STATUS1" description="调用get status，状态应为IDLE" status="run" classname="TestAvFilter" time="0"/>
    <testcase name="TEST_AVFILTER_SETPID" description="分别为上述filter分配pid，pid的值预先固定" status="run" classname="TestAvFilter" time="0"/>
    <testcase name="TEST_AVFILTER_GETPID" description="调用get pid，获得的值应与set的值一致" status="run" classname="TestAvFilter" time="0.043">
      <failure message="Value of: 101 + i&#x0A;  Actual: 101(0x65)&#x0A;Expected: us_pid&#x0A;Which is: 104(0x68)" type=""><![CDATA[gtest/case/module/test_avfilter.cpp:143<br />
Value of: 101 + i<br />
  Actual: 101(0x65)<br />
Expected: us_pid<br />
Which is: 104(0x68)]]></failure>
      <failure message="Value of: 101 + i&#x0A;  Actual: 102(0x66)&#x0A;Expected: us_pid&#x0A;Which is: 105(0x69)" type=""><![CDATA[gtest/case/module/test_avfilter.cpp:143<br />
Value of: 101 + i<br />
  Actual: 102(0x66)<br />
Expected: us_pid<br />
Which is: 105(0x69)]]></failure>
      <failure message="Value of: 101 + i&#x0A;  Actual: 103(0x67)&#x0A;Expected: us_pid&#x0A;Which is: 106(0x6a)" type=""><![CDATA[gtest/case/module/test_avfilter.cpp:143<br />
Value of: 101 + i<br />
  Actual: 103(0x67)<br />
Expected: us_pid<br />
Which is: 106(0x6a)]]></failure>
    </testcase>
    <testcase name="TEST_AVFILTER_ENABLEFILTER" description="分别enable上述3个filter，应返回OK" status="run" classname="TestAvFilter" time="0.001"/>
    <testcase name="TEST_AVFILTER_STATUS2" description="调用get status，状态应为NO DATA" status="run" classname="TestAvFilter" time="0.032">
      <failure message="Value of: CHDRV_AVFILTER_STATUS_NO_DATA&#x0A;  Actual: 2(0x2)&#x0A;Expected: enm_Status&#x0A;Which is: 1(0x1)" type=""><![CDATA[gtest/case/module/test_avfilter.cpp:166<br />
Value of: CHDRV_AVFILTER_STATUS_NO_DATA<br />
  Actual: 2(0x2)<br />
Expected: enm_Status<br />
Which is: 1(0x1)]]></failure>
      <failure message="Value of: CHDRV_AVFILTER_STATUS_NO_DATA&#x0A;  Actual: 2(0x2)&#x0A;Expected: enm_Status&#x0A;Which is: 1(0x1)" type=""><![CDATA[gtest/case/module/test_avfilter.cpp:166<br />
Value of: CHDRV_AVFILTER_STATUS_NO_DATA<br />
  Actual: 2(0x2)<br />
Expected: enm_Status<br />
Which is: 1(0x1)]]></failure>
    </testcase>
    <testcase name="TEST_AVFILTER_STATUS3" description="锁频后，调用get status，状态应为GOOD" status="run" classname="TestAvFilter" time="24.668"/>
    <testcase name="TEST_AVFILTER_DISABLEFILTER" description="分别disable上述3个filter，应返回OK" status="run" classname="TestAvFilter" time="0"/>
    <testcase name="TEST_AVFILTER_FREE" description="分别delete上述3个filter，应返回OK" status="run" classname="TestAvFilter" time="0.013"/>
  </testsuite>
  <testsuite name="TestPesfilter" tests="82/82" failures="0" disabled="0" errors="0" time="0">  
    <testcase name="TEST_PESFILTER_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestPesfilter" time="0"/>
    <testcase name="TEST_PESFILTER_INIT2" description="测试模块是否可被销毁" status="run" classname="TestPesfilter" time="0"/>
    <testcase name="TEST_PESFILTER_INIT3" description="测试CHDRV_PESFILTER_GetVersion是否成功" status="run" classname="TestPesfilter" time="0.002"/>
    <testcase name="TEST_PESFILER_ALLOC1" description="ALLOC一个TS类型的filter，应返回成功，句柄不为NULL;回调函数里直接读取section并计数" status="run" classname="TestPesfilter" time="0"/>
    <testcase name="TEST_PESFILTER_SET1" description="SET FILTER PID为指定的值，应返回成功" status="run" classname="TestPesfilter" time="0"/>
    <testcase name="TEST_PESFILTER_START1" description="调用START FILTER，应返回成功；提示测试员开始播放码流" status="run" classname="TestPesfilter"    <testcase name="TEST_PESFILTER_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestPesfilter" time="0"/>
    <testcase name="TEST_PESFILTER_INIT2" description="测试模块是否可被销毁" status="run" classname="TestPesfilter" time="0"/>
    <testcase name="TEST_PESFILTER_INIT3" description="测试CHDRV_PESFILTER_GetVersion是否成功" status="run" classname="TestPesfilter" time="0.003"/>
    <testcase name="TEST_PESFILER_ALLOC1" description="ALLOC一个TS类型的filter，应返回成功，句柄不为NULL;回调函数里直接读取section并计数" status="run" classname="TestPesfilter" time="0"/>
    <testcase name="TEST_PESFILTER_SET1" description="SET FILTER PID为指定的值，应返回成功" status="run" classname="TestPesfilter" time="0"/>
    <testcase name="TEST_PESFILTER_START1" description="调用START FILTER，应返回成功；提示测试员开始播放码流" status="run" classname="TestPesfilter" time="26.008"/>
    <testcase name="TEST_PESFILTER_STOP1" description="提示测试员等待码流播放一轮结束后，调用STOP FILTER，应返回成功" status="run" classname="TestPesfilter" time="161.249"/>
    <testcase name="TEST_PESFILTER_READ1" description="统计收到的TS个数，并与预先设定的值进行比较，低于预设值本测试失败" status="run" classname="TestPesfilter" time="0.018">
      <failure message="Expected: (section_num) &gt;= (deservedNum), actual: 43571(0xaa33) vs 188524(0x2e06c)&#x0A;接收TS漏包" type=""><![CDATA[gtest/case/module/test_pesfilter.cpp:191<br />
Expected: (section_num) >= (deservedNum), actual: 43571(0xaa33) vs 188524(0x2e06c)<br />
接收TS漏包]]></failure>
    </testcase>
    <testcase name="TEST_PESFILTER_FREE1" description="调用FREE FILTER，应返回成功" status="run" classname="TestPesfilter" time="0.009"/>
    <testcase name="TEST_PESFILTER_ALLOC2" description="ALLOC一个PES类型的filter,应返回成功，句柄不为NULL;回调函数里直接读取section并计数" status="run" classname="TestPesfilter" time="0.001"/>
    <testcase name="TEST_PESFILTER_SET2" description="SET FILTER PID为指定的值，应返回成功" status="run" classname="TestPesfilter" time="0.001"/>
    <testcase name="TEST_PESFILTER_START2" description="调用START FILTER，应返回成功；提示测试员开始播放码流" status="run" classname="TestPesfilter" time="25.948"/>
    <testcase name="TEST_PESFILTER_STOP2" description="提示测试员等待码流播放一轮结束后，调用STOP FILTER，应返回成功" status="run" classname="TestPesfilter" time="79.075"/>
    <testcase name="TEST_PESFILTER_READ2" description="统计收到的PES个数，并与预先设定的值进行比较，低于预设值本测试失败" status="run" classname="TestPesfilter" time="0.017">
      <failure message="Expected: (section_num) &gt;= (deservedNum), actual: 21(0x15) vs 1500(0x5dc)&#x0A;接收PES漏包" type=""><![CDATA[gtest/case/module/test_pesfilter.cpp:244<br />
Expected: (section_num) >= (deservedNum), actual: 21(0x15) vs 1500(0x5dc)<br />
接收PES漏包]]></failure>
    </testcase>
    <testcase name="TEST_PESFILTER_FREE2" description="调用FREE FILTER，应返回成功" status="run" classname="TestPesfilter" time="0.009"/>
  </testsuite>
  <testsuite name="TestGpio" tests="3/3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_GPIO_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestGpio" time="0"/>
    <testcase name="TEST_GPIO_INIT2" description="测试模块是否可被销毁" status="run" classname="TestGpio" time="0"/>
    <testcase name="TEST_GPIO_INIT3" description="测试CHDRV_GPIO_GetVersion是否成功" status="run" classname="TestGpio" time="0.003"/>
  </testsuite>
  <testsuite name="TestTsmng" tests="6/6" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_TSMNG_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestTsmng" time="0.001"/>
    <testcase name="TEST_TSMNG_INIT2" description="测试模块是否可被销毁" status="run" classname="TestTsmng" time="0"/>
    <testcase name="TEST_TSMNG_INIT3" description="测试CHDRV_TSMNG_GetVersion是否成功" status="run" classname="TestTsmng" time="0.003"/>
    <testcase name="TEST_TSMNG_INIT4" description="测试CHDRV_TSMNG_Open是否成功" status="run" classname="TestTsmng" time="0.004"/>
    <testcase name="TEST_TSMNG_FUN1" description="测试CHDRV_TSMNG_SetInputChannel是否成功" status="run" classname="TestTsmng" time="0.008"/>
    <testcase name="TEST_TSMNG_INIT5" description="测试CHDRV_TSMNG_Close是否成功" status="run" classname="TestTsmng" time="0.004"/>
  </testsuite>
  <testsuite name="TestVideo" tests="3/3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_VIDEO_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestVideo" time="0.032">
      <failure message="Value of: CHDRV_VIDEO_Init()&#x0A;  Actual: 2(0x2)&#x0A;Expected: CHDRV_VIDEO_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_video.cpp:50<br />
Value of: CHDRV_VIDEO_Init()<br />
  Actual: 2(0x2)<br />
Expected: CHDRV_VIDEO_OK<br />
Which is: 0(0x0)]]></failure>
      <failure message="Value of: CHDRV_VIDEO_Init()&#x0A;  Actual: 2(0x2)&#x0A;Expected: CHDRV_VIDEO_OK&#x0A;Which is: 0(0x0)&#x0A;多次初始化应该返回OK" type=""><![CDATA[gtest/case/module/test_video.cpp:51<br />
Value of: CHDRV_VIDEO_Init()<br />
  Actual: 2(0x2)<br />
Expected: CHDRV_VIDEO_OK<br />
Which is: 0(0x0)<br />
多次初始化应该返回OK]]></failure>
    </testcase>
    <testcase name="TEST_VIDEO_INIT2" description="测试模块是否可被销毁" status="run" classname="TestVideo" time="0"/>
    <testcase name="TEST_VIDEO_INIT3" description="测试CHDRV_VIDEO_GetVersion是否成功" status="run" classname="TestVideo" time="0.002"/>
  </testsuite>
  <testsuite name="TestAudio" tests="18/18" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_AUDIO_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestAudio" time="0"/>
    <testcase name="TEST_AUDIO_INIT2" description="测试CHDRV_AUDIO_Term是否成功" status="run" classname="TestAudio" time="0.191"/>
    <testcase name="TEST_AUDIO_INIT4" description="测试没有初始化时，其他函数是否能调用成功" status="run" classname="TestAudio" time="0.004"/>
    <testcase name="TEST_AUDIO_INIT5" description="测试调用CHDRV_AUDIO_Term后，再调用其他函数是否能成功" status="run" classname="TestAudio" time="0.161"/>
    <testcase name="TEST_AUDIO_PARAMS1" description="open无效参数测试" status="run" classname="TestAudio" time="0.078">
      <failure message="Value of: CHDRV_AUDIO_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_AUDIO_Open(0,__null)&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_audio.cpp:98<br />
Value of: CHDRV_AUDIO_OK<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_AUDIO_Open(0,__null)<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_AUDIO_PARAMS2" description="close无效参数测试" status="run" classname="TestAudio" time="0.02">
      <failure message="Value of: CHDRV_AUDIO_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_AUDIO_Close(__null)&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_audio.cpp:104<br />
Value of: CHDRV_AUDIO_OK<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_AUDIO_Close(__null)<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_AUDIO_PARAMS3" description="start无效参数测试" status="run" classname="TestAudio" time="0.012"/>
    <testcase name="TEST_AUDIO_PARAMS4" description="stop无效参数测试" status="run" classname="TestAudio" time="0.107"/>
    <testcase name="TEST_AUDIO_PARAMS7" description="ram start无效参数测试" status="run" classname="TestAudio" time="0.018">
      <failure message="Value of: CHDRV_AUDIO_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_AUDIO_RamStartDecode(gh_AudioHandle,__null)&#x0A;Which is: 4(0x4)" type=""><![CDATA[gtest/case/module/test_audio.cpp:157<br />
Value of: CHDRV_AUDIO_OK<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_AUDIO_RamStartDecode(gh_AudioHandle,__null)<br />
Which is: 4(0x4)]]></failure>
    </testcase>
    <testcase name="TEST_AUDIO_PARAMS8" description="ram input无效参数测试" status="run" classname="TestAudio" time="0.009">
      <failure message="Failed&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_audio.cpp:178<br />
Failed<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_AUDIO_PARAMS9" description="ram stop无效参数测试" status="run" classname="TestAudio" time="0.022">
      <failure message="Failed&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_audio.cpp:197<br />
Failed<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_AUDIO_PARAMS10" description="ram pause无效参数测试" status="run" classname="TestAudio" time="0.023">
      <failure message="Value of: CHDRV_AUDIO_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_AUDIO_RamPauseDecode(__null)&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_audio.cpp:209<br />
Value of: CHDRV_AUDIO_OK<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_AUDIO_RamPauseDecode(__null)<br />
Which is: 3(0x3)]]></failure>
    </testcase>
    <testcase name="TEST_AUDIO_PARAMS11" description="ram resume无效参数测试" status="run" classname="TestAudio" time="0.029">
      <failure message="Value of: CHDRV_AUDIO_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_AUDIO_RamResumeDecode(__null)&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_audio.cpp:217<br />
Value of: CHDRV_AUDIO_OK<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_AUDIO_RamResumeDecode(__null)<br />
Which is: 3(0x3)]]></failure>
    </testcase>
    <testcase name="TEST_AUDIO_PARAMS12" description="install callback无效参数测试" status="run" classname="TestAudio" time="0"/>
    <testcase name="TEST_AUDIO_PARAMS13" description="uninstall callback无效参数测试" status="run" classname="TestAudio" time="0"/>
    <testcase name="TEST_AUDIO_PARAMS14" description="get status无效参数测试" status="run" classname="TestAudio" time="0.009">
      <failure message="Failed&#x0A;应通过死亡测试" type=""><![CDATA[gtest/case/module/test_audio.cpp:245<br />
Failed<br />
应通过死亡测试]]></failure>
    </testcase>
    <testcase name="TEST_AUDIO_FUNCTION1" description="以正确参数open 1路audio，是否返回成功，且句柄不为NULL" status="run" classname="TestAudio" time="0.029">
      <failure message="Value of: CHDRV_AUDIO_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_AUDIO_Open(0,&amp;gh_AudioHandle)&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_audio.cpp:339<br />
Value of: CHDRV_AUDIO_OK<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_AUDIO_Open(0,&gh_AudioHandle)<br />
Which is: 3(0x3)]]></failure>
    </testcase>
    <testcase name="TEST_AUDIO_FUNCTION2" description="调用get status，获得的状态应为idle" status="run" classname="TestAudio" time="0.016">
      <failure message="Value of: CHDRV_AUDIO_STATUS_IDLE&#x0A;  Actual: 0(0x0)&#x0A;Expected: enm_audStatus&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_audio.cpp:351<br />
Value of: CHDRV_AUDIO_STATUS_IDLE<br />
  Actual: 0(0x0)<br />
Expected: enm_audStatus<br />
Which is: 3(0x3)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="TestAV" tests="82/82" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_AV_OPEN1" description="打开一路video,一路audio是否成成功" status="run" classname="TestAV" time="0.027"/>
    <testcase name="TEST_AV_RAM_START1" description="ram start一幅I帧图片是否成功" status="run" classname="TestAV" time="2.8"/>
    <testcase name="TEST_AV_RAM_STOP1" description="ram stopI帧图片是否成功" status="run" classname="TestAV" time="0.007"/>
    <testcase name="TEST_AV_RAM_BEEP_1" description="ram start一个pcm格式的beep声音文件,是否听到声音" status="run" classname="TestAV" time="11.708">
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;音频注入播放LPCM文件失败" type=""><![CDATA[gtest/case/module/test_av.cpp:637<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
音频注入播放LPCM文件失败]]></failure>
    </testcase>
    <testcase name="TEST_AV_RAM_BEEP_2" description="ram start一个MPEG1格式的beep声音文件,是否听到声音" status="run" classname="TestAV" time="22.116">
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;音频注入播放MPEG1失败" type=""><![CDATA[gtest/case/module/test_av.cpp:671<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
音频注入播放MPEG1失败]]></failure>
    </testcase>
    <testcase name="TEST_AV_SET_WIN1" description="SetWinAttrib将切换模式切换为黑屏模式，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="0.004"/>
    <testcase name="TEST_AV_START1" description="播放16:9流,音视频输出是否正常" status="run" classname="TestAV" time="69.727"/>
    <testcase name="TEST_AV_CALL1" description="给audio、video注册3个回调函数是否成功" status="run" classname="TestAV" time="1.258"/>
    <testcase name="TEST_AV_CALL2" description="av的3个callback,是否均收到了DECODE事件，" status="run" classname="TestAV" time="1.075">
      <failure message="Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODED][1]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av播放成功，应收到至少一次decoded事件" type=""><![CDATA[gtest/case/module/test_av.cpp:785<br />
Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODED][1]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av播放成功，应收到至少一次decoded事件]]></failure>
      <failure message="Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODED][2]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av播放成功，应收到至少一次decoded事件" type=""><![CDATA[gtest/case/module/test_av.cpp:786<br />
Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODED][2]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av播放成功，应收到至少一次decoded事件]]></failure>
      <failure message="Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_NEW_FRAME][1]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av播放成功，应收到至少一次new frame事件" type=""><![CDATA[gtest/case/module/test_av.cpp:789<br />
Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_NEW_FRAME][1]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av播放成功，应收到至少一次new frame事件]]></failure>
      <failure message="Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_NEW_FRAME][2]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av播放成功，应收到至少一次new frame事件" type=""><![CDATA[gtest/case/module/test_av.cpp:790<br />
Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_NEW_FRAME][2]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av播放成功，应收到至少一次new frame事件]]></failure>
    </testcase>
    <testcase name="TEST_AV_STATUS1" description="分别调用av的get status，获得的状态均应为good" status="run" classname="TestAV" time="0.035">
      <failure message="Value of: CHDRV_VIDEO_STATUS_GOOD&#x0A;  Actual: 3(0x3)&#x0A;Expected: vid_status&#x0A;Which is: 1(0x1)" type=""><![CDATA[gtest/case/module/test_av.cpp:803<br />
Value of: CHDRV_VIDEO_STATUS_GOOD<br />
  Actual: 3(0x3)<br />
Expected: vid_status<br />
Which is: 1(0x1)]]></failure>
    </testcase>
    <testcase name="TEST_AV_SET_WINATTRIB8" description="切换模式切换为黑屏模式，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="0"/>
    <testcase name="TEST_AV_STOP1" description="调用stop decoder，应返回OK" status="run" classname="TestAV" time="0.171"/>
    <testcase name="TEST_AV_STOP2" description="询问测试员观察，此时画面应为黑色" status="run" classname="TestAV" time="3.285"/>
    <testcase name="TEST_AV_STATUS3" description="暂停（停止）码流播出，但保持调制器输出，分别调用av的get status返回状态应为NOHEADER" status="run" classname="TestAV" time="4.33">
      <failure message="Value of: CHDRV_AUDIO_STATUS_NOHEADER&#x0A;  Actual: 1(0x1)&#x0A;Expected: aud_status&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_av.cpp:968<br />
Value of: CHDRV_AUDIO_STATUS_NOHEADER<br />
  Actual: 1(0x1)<br />
Expected: aud_status<br />
Which is: 3(0x3)]]></failure>
      <failure message="Value of: CHDRV_AVFILTER_STATUS_NO_DATA&#x0A;  Actual: 2(0x2)&#x0A;Expected: enm_Status&#x0A;Which is: 1(0x1)" type=""><![CDATA[gtest/case/module/test_av.cpp:974<br />
Value of: CHDRV_AVFILTER_STATUS_NO_DATA<br />
  Actual: 2(0x2)<br />
Expected: enm_Status<br />
Which is: 1(0x1)]]></failure>
      <failure message="Value of: CHDRV_AVFILTER_STATUS_NO_DATA&#x0A;  Actual: 2(0x2)&#x0A;Expected: enm_Status&#x0A;Which is: 1(0x1)" type=""><![CDATA[gtest/case/module/test_av.cpp:979<br />
Value of: CHDRV_AVFILTER_STATUS_NO_DATA<br />
  Actual: 2(0x2)<br />
Expected: enm_Status<br />
Which is: 1(0x1)]]></failure>
    </testcase>
    <testcase name="TEST_AV_SET_WINATTRIB9" description="切换模式切换为静帧模式，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="0.004"/>
    <testcase name="TEST_AV_STOP3" description="调用stop av decoder，均应返回OK" status="run" classname="TestAV" time="5.412"/>
    <testcase name="TEST_AV_STOP4" description="询问是否为最后一帧" status="run" classname="TestAV" time="2.916"/>
    <testcase name="TEST_AV_CLEARBUFFER" description="调用clear video buffer，应返回OK" status="run" classname="TestAV" time="3.913">
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;ClearVideoBuffer未能成功将静帧视频清除掉" type=""><![CDATA[gtest/case/module/test_av.cpp:1022<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
ClearVideoBuffer未能成功将静帧视频清除掉]]></failure>
    </testcase>
    <testcase name="TEST_AV_START5" description="以错误的decoder type再次open av decoder，应返回OK" status="run" classname="TestAV" time="1.981"/>
    <testcase name="TEST_AV_START3" description="测试员观察画面应无输出，无声音" status="run" classname="TestAV" time="6.249"/>
    <testcase name="TEST_AV_STATUS4" description="分别调用av的get status，状态应为error" status="run" classname="TestAV" time="0.05">
      <failure message="Value of: CHDRV_VIDEO_STATUS_ERR&#x0A;  Actual: 2(0x2)&#x0A;Expected: vid_status&#x0A;Which is: 1(0x1)" type=""><![CDATA[gtest/case/module/test_av.cpp:1076<br />
Value of: CHDRV_VIDEO_STATUS_ERR<br />
  Actual: 2(0x2)<br />
Expected: vid_status<br />
Which is: 1(0x1)]]></failure>
      <failure message="Value of: CHDRV_AUDIO_STATUS_ERR&#x0A;  Actual: 2(0x2)&#x0A;Expected: aud_status&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_av.cpp:1077<br />
Value of: CHDRV_AUDIO_STATUS_ERR<br />
  Actual: 2(0x2)<br />
Expected: aud_status<br />
Which is: 3(0x3)]]></failure>
    </testcase>
    <testcase name="TEST_AV_CALL4" description="分别检查av的3个回调函数，均应收到了DECODED ERROR事件" status="run" classname="TestAV" time="1.118">
      <failure message="Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODING_ERROR][0]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av解码错误，应收到至少一次decode error事件" type=""><![CDATA[gtest/case/module/test_av.cpp:1084<br />
Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODING_ERROR][0]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av解码错误，应收到至少一次decode error事件]]></failure>
      <failure message="Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODING_ERROR][1]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av解码错误，应收到至少一次decode error事件" type=""><![CDATA[gtest/case/module/test_av.cpp:1085<br />
Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODING_ERROR][1]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av解码错误，应收到至少一次decode error事件]]></failure>
      <failure message="Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODING_ERROR][2]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av解码错误，应收到至少一次decode error事件" type=""><![CDATA[gtest/case/module/test_av.cpp:1086<br />
Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODING_ERROR][2]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av解码错误，应收到至少一次decode error事件]]></failure>
      <failure message="Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_DECODE_ERROR][0]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av解码错误，应收到至少一次decode error事件" type=""><![CDATA[gtest/case/module/test_av.cpp:1088<br />
Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_DECODE_ERROR][0]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av解码错误，应收到至少一次decode error事件]]></failure>
      <failure message="Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_DECODE_ERROR][1]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av解码错误，应收到至少一次decode error事件" type=""><![CDATA[gtest/case/module/test_av.cpp:1089<br />
Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_DECODE_ERROR][1]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av解码错误，应收到至少一次decode error事件]]></failure>
      <failure message="Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_DECODE_ERROR][2]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av解码错误，应收到至少一次decode error事件" type=""><![CDATA[gtest/case/module/test_av.cpp:1090<br />
Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_DECODE_ERROR][2]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av解码错误，应收到至少一次decode error事件]]></failure>
    </testcase>
    <testcase name="TEST_AUDIO_FUNCTION8" description="删除已注册的回调函数，应均能成功" status="run" classname="TestAV" time="0.055">
      <failure message="Value of: CHDRV_VIDEO_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VIDEO_UnInstallCallback((video_GetHandleNums() &gt; 0 ? video_GetHandle(0) : __null),video_call2)&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_av.cpp:1102<br />
Value of: CHDRV_VIDEO_OK<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VIDEO_UnInstallCallback((video_GetHandleNums() > 0 ? video_GetHandle(0) : __null),video_call2)<br />
Which is: 3(0x3)]]></failure>
      <failure message="Value of: CHDRV_VIDEO_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VIDEO_UnInstallCallback((video_GetHandleNums() &gt; 0 ? video_GetHandle(0) : __null),video_call3)&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_av.cpp:1103<br />
Value of: CHDRV_VIDEO_OK<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VIDEO_UnInstallCallback((video_GetHandleNums() > 0 ? video_GetHandle(0) : __null),video_call3)<br />
Which is: 3(0x3)]]></failure>
    </testcase>
    <testcase name="TEST_AV_START4" description="再次以正确的参数start audio video，画面输出正常，声音无爆音；然后再关闭，静帧显示正常，重复上述过程10次" status="run" classname="TestAV" time="26.043"/>
    <testcase name="TEST_AV_CLOSE1" description="调用close删除audio video句柄，应返回成功" status="run" classname="TestAV" time="0.233"/>
    <testcase name="TEST_AV_IFRAME_PLAY_1" description="播放一个16:9的I帧，检查是否成功" status="run" classname="TestAV"    <testcase name="TEST_AV_OPEN1" description="打开一路video,一路audio是否成成功" status="run" classname="TestAV" time="0.027"/>
    <testcase name="TEST_AV_RAM_START1" description="ram start一幅I帧图片是否成功" status="run" classname="TestAV" time="139.516"/>
    <testcase name="TEST_AV_RAM_STOP1" description="ram stopI帧图片是否成功" status="run" classname="TestAV" time="0.018"/>
    <testcase name="TEST_AV_RAM_BEEP_1" description="ram start一个pcm格式的beep声音文件,是否听到声音" status="run" classname="TestAV" time="65.993">
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;音频注入播放LPCM文件失败" type=""><![CDATA[gtest/case/module/test_av.cpp:637<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
音频注入播放LPCM文件失败]]></failure>
    </testcase>
    <testcase name="TEST_AV_RAM_BEEP_2" description="ram start一个MPEG1格式的beep声音文件,是否听到声音" status="run" classname="TestAV" time="25.421">
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;音频注入播放MPEG1失败" type=""><![CDATA[gtest/case/module/test_av.cpp:671<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
音频注入播放MPEG1失败]]></failure>
    </testcase>
    <testcase name="TEST_AV_SET_WIN1" description="SetWinAttrib将切换模式切换为黑屏模式，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="0.004"/>
    <testcase name="TEST_AV_START1" description="播放16:9流,音视频输出是否正常" status="run" classname="TestAV" time="61.387"/>
    <testcase name="TEST_AV_CALL1" description="给audio、video注册3个回调函数是否成功" status="run" classname="TestAV" time="1.244"/>
    <testcase name="TEST_AV_CALL2" description="av的3个callback,是否均收到了DECODE事件，" status="run" classname="TestAV" time="1.075">
      <failure message="Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODED][1]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av播放成功，应收到至少一次decoded事件" type=""><![CDATA[gtest/case/module/test_av.cpp:785<br />
Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODED][1]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av播放成功，应收到至少一次decoded事件]]></failure>
      <failure message="Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODED][2]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av播放成功，应收到至少一次decoded事件" type=""><![CDATA[gtest/case/module/test_av.cpp:786<br />
Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODED][2]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av播放成功，应收到至少一次decoded事件]]></failure>
      <failure message="Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_NEW_FRAME][1]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av播放成功，应收到至少一次new frame事件" type=""><![CDATA[gtest/case/module/test_av.cpp:789<br />
Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_NEW_FRAME][1]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av播放成功，应收到至少一次new frame事件]]></failure>
      <failure message="Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_NEW_FRAME][2]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av播放成功，应收到至少一次new frame事件" type=""><![CDATA[gtest/case/module/test_av.cpp:790<br />
Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_NEW_FRAME][2]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av播放成功，应收到至少一次new frame事件]]></failure>
    </testcase>
    <testcase name="TEST_AV_STATUS1" description="分别调用av的get status，获得的状态均应为good" status="run" classname="TestAV" time="0.035">
      <failure message="Value of: CHDRV_VIDEO_STATUS_GOOD&#x0A;  Actual: 3(0x3)&#x0A;Expected: vid_status&#x0A;Which is: 1(0x1)" type=""><![CDATA[gtest/case/module/test_av.cpp:803<br />
Value of: CHDRV_VIDEO_STATUS_GOOD<br />
  Actual: 3(0x3)<br />
Expected: vid_status<br />
Which is: 1(0x1)]]></failure>
    </testcase>
    <testcase name="TEST_AV_SET_WINATTRIB8" description="切换模式切换为黑屏模式，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="0"/>
    <testcase name="TEST_AV_STOP1" description="调用stop decoder，应返回OK" status="run" classname="TestAV" time="0.168"/>
    <testcase name="TEST_AV_STOP2" description="询问测试员观察，此时画面应为黑色" status="run" classname="TestAV" time="9.466"/>
    <testcase name="TEST_AV_STATUS3" description="暂停（停止）码流播出，但保持调制器输出，分别调用av的get status返回状态应为NOHEADER" status="run" classname="TestAV" time="4.326">
      <failure message="Value of: CHDRV_AUDIO_STATUS_NOHEADER&#x0A;  Actual: 1(0x1)&#x0A;Expected: aud_status&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_av.cpp:968<br />
Value of: CHDRV_AUDIO_STATUS_NOHEADER<br />
  Actual: 1(0x1)<br />
Expected: aud_status<br />
Which is: 3(0x3)]]></failure>
      <failure message="Value of: CHDRV_AVFILTER_STATUS_NO_DATA&#x0A;  Actual: 2(0x2)&#x0A;Expected: enm_Status&#x0A;Which is: 1(0x1)" type=""><![CDATA[gtest/case/module/test_av.cpp:974<br />
Value of: CHDRV_AVFILTER_STATUS_NO_DATA<br />
  Actual: 2(0x2)<br />
Expected: enm_Status<br />
Which is: 1(0x1)]]></failure>
      <failure message="Value of: CHDRV_AVFILTER_STATUS_NO_DATA&#x0A;  Actual: 2(0x2)&#x0A;Expected: enm_Status&#x0A;Which is: 1(0x1)" type=""><![CDATA[gtest/case/module/test_av.cpp:979<br />
Value of: CHDRV_AVFILTER_STATUS_NO_DATA<br />
  Actual: 2(0x2)<br />
Expected: enm_Status<br />
Which is: 1(0x1)]]></failure>
    </testcase>
    <testcase name="TEST_AV_SET_WINATTRIB9" description="切换模式切换为静帧模式，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="0.004"/>
    <testcase name="TEST_AV_STOP3" description="调用stop av decoder，均应返回OK" status="run" classname="TestAV" time="11.25"/>
    <testcase name="TEST_AV_STOP4" description="询问是否为最后一帧" status="run" classname="TestAV" time="3.467"/>
    <testcase name="TEST_AV_CLEARBUFFER" description="调用clear video buffer，应返回OK" status="run" classname="TestAV" time="4.533">
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;ClearVideoBuffer未能成功将静帧视频清除掉" type=""><![CDATA[gtest/case/module/test_av.cpp:1022<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
ClearVideoBuffer未能成功将静帧视频清除掉]]></failure>
    </testcase>
    <testcase name="TEST_AV_START5" description="以错误的decoder type再次open av decoder，应返回OK" status="run" classname="TestAV" time="1.987"/>
    <testcase name="TEST_AV_START3" description="测试员观察画面应无输出，无声音" status="run" classname="TestAV" time="4.411"/>
    <testcase name="TEST_AV_STATUS4" description="分别调用av的get status，状态应为error" status="run" classname="TestAV" time="0.05">
      <failure message="Value of: CHDRV_VIDEO_STATUS_ERR&#x0A;  Actual: 2(0x2)&#x0A;Expected: vid_status&#x0A;Which is: 1(0x1)" type=""><![CDATA[gtest/case/module/test_av.cpp:1076<br />
Value of: CHDRV_VIDEO_STATUS_ERR<br />
  Actual: 2(0x2)<br />
Expected: vid_status<br />
Which is: 1(0x1)]]></failure>
      <failure message="Value of: CHDRV_AUDIO_STATUS_ERR&#x0A;  Actual: 2(0x2)&#x0A;Expected: aud_status&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_av.cpp:1077<br />
Value of: CHDRV_AUDIO_STATUS_ERR<br />
  Actual: 2(0x2)<br />
Expected: aud_status<br />
Which is: 3(0x3)]]></failure>
    </testcase>
    <testcase name="TEST_AV_CALL4" description="分别检查av的3个回调函数，均应收到了DECODED ERROR事件" status="run" classname="TestAV" time="1.118">
      <failure message="Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODING_ERROR][0]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av解码错误，应收到至少一次decode error事件" type=""><![CDATA[gtest/case/module/test_av.cpp:1084<br />
Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODING_ERROR][0]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av解码错误，应收到至少一次decode error事件]]></failure>
      <failure message="Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODING_ERROR][1]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av解码错误，应收到至少一次decode error事件" type=""><![CDATA[gtest/case/module/test_av.cpp:1085<br />
Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODING_ERROR][1]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av解码错误，应收到至少一次decode error事件]]></failure>
      <failure message="Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODING_ERROR][2]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av解码错误，应收到至少一次decode error事件" type=""><![CDATA[gtest/case/module/test_av.cpp:1086<br />
Expected: (gi_vid_event_count[CHDRV_VIDEO_EVENT_DECODING_ERROR][2]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av解码错误，应收到至少一次decode error事件]]></failure>
      <failure message="Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_DECODE_ERROR][0]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av解码错误，应收到至少一次decode error事件" type=""><![CDATA[gtest/case/module/test_av.cpp:1088<br />
Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_DECODE_ERROR][0]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av解码错误，应收到至少一次decode error事件]]></failure>
      <failure message="Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_DECODE_ERROR][1]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av解码错误，应收到至少一次decode error事件" type=""><![CDATA[gtest/case/module/test_av.cpp:1089<br />
Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_DECODE_ERROR][1]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av解码错误，应收到至少一次decode error事件]]></failure>
      <failure message="Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_DECODE_ERROR][2]) &gt; (0), actual: 0(0x0) vs 0(0x0)&#x0A;av解码错误，应收到至少一次decode error事件" type=""><![CDATA[gtest/case/module/test_av.cpp:1090<br />
Expected: (gi_aud_event_count[CHDRV_AUDIO_EVENT_DECODE_ERROR][2]) > (0), actual: 0(0x0) vs 0(0x0)<br />
av解码错误，应收到至少一次decode error事件]]></failure>
    </testcase>
    <testcase name="TEST_AUDIO_FUNCTION8" description="删除已注册的回调函数，应均能成功" status="run" classname="TestAV" time="0.054">
      <failure message="Value of: CHDRV_VIDEO_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VIDEO_UnInstallCallback((video_GetHandleNums() &gt; 0 ? video_GetHandle(0) : __null),video_call2)&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_av.cpp:1102<br />
Value of: CHDRV_VIDEO_OK<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VIDEO_UnInstallCallback((video_GetHandleNums() > 0 ? video_GetHandle(0) : __null),video_call2)<br />
Which is: 3(0x3)]]></failure>
      <failure message="Value of: CHDRV_VIDEO_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VIDEO_UnInstallCallback((video_GetHandleNums() &gt; 0 ? video_GetHandle(0) : __null),video_call3)&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_av.cpp:1103<br />
Value of: CHDRV_VIDEO_OK<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VIDEO_UnInstallCallback((video_GetHandleNums() > 0 ? video_GetHandle(0) : __null),video_call3)<br />
Which is: 3(0x3)]]></failure>
    </testcase>
    <testcase name="TEST_AV_START4" description="再次以正确的参数start audio video，画面输出正常，声音无爆音；然后再关闭，静帧显示正常，重复上述过程10次" status="run" classname="TestAV" time="77.647"/>
    <testcase name="TEST_AV_CLOSE1" description="调用close删除audio video句柄，应返回成功" status="run" classname="TestAV" time="0.248"/>
    <testcase name="TEST_AV_IFRAME_PLAY_1" description="播放一个16:9的I帧，检查是否成功" status="run" classname="TestAV" time="6.184"/>
    <testcase name="TEST_AV_SET_WINATTRIB1" description="切换窗口显示比例为16：9，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="0.894"/>
    <testcase name="TEST_AV_SET_WINATTRIB2" description="依次切换窗口显示模式，询问测试员画面应均为满屏，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="11.903"/>
    <testcase name="TEST_AV_SET_WINATTRIB3" description="切换窗口显示比例为4：3，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="0.102"/>
    <testcase name="TEST_AV_SET_WINATTRIB4" description="切换窗口显示模式为PANSCAN，画面左右被裁剪，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="4.321"/>
    <testcase name="TEST_AV_SET_WINATTRIB5" description="切换窗口显示模式为LEFTBOX，上下被填充成黑色，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="5.044"/>
    <testcase name="TEST_AV_SET_WINATTRIB6" description="切换窗口显示模式为FULL，上下被拉伸，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="2.899"/>
    <testcase name="TEST_AV_SET_WINATTRIB7" description="窗口显示模式为COMBO，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="2.484"/>
    <testcase name="TEST_AV_VIDEO_INFO2" description="调用GetVideoInfo，应返回OK，获得的宽高比应为16:9" status="run" classname="TestAV" time="0.091">
      <failure message="Value of: CHDRV_VIDEO_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VIDEO_GetVideoInfo((video_GetHandleNums() &gt; 0 ? video_GetHandle(0) : __null), &amp;vidInfo)&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_av.cpp:1339<br />
Value of: CHDRV_VIDEO_OK<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VIDEO_GetVideoInfo((video_GetHandleNums() > 0 ? video_GetHandle(0) : __null), &vidInfo)<br />
Which is: 3(0x3)]]></failure>
      <failure message="Value of: CHDRV_VIDEO_ASPECT_16X9&#x0A;  Actual: 1(0x1)&#x0A;Expected: vidInfo.enm_AspectRatio&#x0A;Which is: 2164634312(0x8105b2c8)&#x0A;获取的视频宽高比错误" type=""><![CDATA[gtest/case/module/test_av.cpp:1340<br />
Value of: CHDRV_VIDEO_ASPECT_16X9<br />
  Actual: 1(0x1)<br />
Expected: vidInfo.enm_AspectRatio<br />
Which is: 2164634312(0x8105b2c8)<br />
获取的视频宽高比错误]]></failure>
      <failure message="Value of: CH_VIDEO_CODE_MPEG2&#x0A;  Actual: 0(0x0)&#x0A;Expected: vidInfo.enm_DecodeType&#x0A;Which is: 2153327108(0x80592a04)&#x0A;获取的视频编码类型错误" type=""><![CDATA[gtest/case/module/test_av.cpp:1341<br />
Value of: CH_VIDEO_CODE_MPEG2<br />
  Actual: 0(0x0)<br />
Expected: vidInfo.enm_DecodeType<br />
Which is: 2153327108(0x80592a04)<br />
获取的视频编码类型错误]]></failure>
    </testcase>
    <testcase name="TEST_AV_IFRAME_PLAY_2" description="播放一个4:3的I帧，检查是否成功" status="run" classname="TestAV" time="3.806"/>
    <testcase name="TEST_AV_SET_WINATTRIB10" description="切换窗口显示比例为4：3，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="0"/>
    <testcase name="TEST_AV_SET_WINATTRIB11" description="切换窗口显示模式，询问测试员画面应均为满屏，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="5.541"/>
    <testcase name="TEST_AV_SET_WINATTRIB12" description="切换窗口显示比例为16：9，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="0.115"/>
    <testcase name="TEST_AV_SET_WINATTRIB13" description="切换窗口显示模式为PANSCAN，画面上下被裁剪，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="3.45"/>
    <testcase name="TEST_AV_SET_WINATTRIB14" description="切换窗口显示模式为LEFTBOX，左右被填充成黑边，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="3.44"/>
    <testcase name="TEST_AV_SET_WINATTRIB15" description="切换窗口显示模式为FULL，左右被拉伸，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="2.46"/>
    <testcase name="TEST_AV_SET_WINATTRIB16" description="切换窗口显示模式为COMBO，画面介于上述画面效果之间，GetWinAttrib与设置的值是否一致" status="run" classname="TestAV" time="0.141"/>
    <testcase name="TEST_AV_VIDEO_INFO3" description="调用GetVideoInfo，应返回OK，获得的宽高比应为4:3" status="run" classname="TestAV" time="0.091">
      <failure message="Value of: CHDRV_VIDEO_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CHDRV_VIDEO_GetVideoInfo((video_GetHandleNums() &gt; 0 ? video_GetHandle(0) : __null), &amp;vidInfo)&#x0A;Which is: 3(0x3)" type=""><![CDATA[gtest/case/module/test_av.cpp:1508<br />
Value of: CHDRV_VIDEO_OK<br />
  Actual: 0(0x0)<br />
Expected: CHDRV_VIDEO_GetVideoInfo((video_GetHandleNums() > 0 ? video_GetHandle(0) : __null), &vidInfo)<br />
Which is: 3(0x3)]]></failure>
      <failure message="Value of: CHDRV_VIDEO_ASPECT_4X3&#x0A;  Actual: 0(0x0)&#x0A;Expected: vidInfo.enm_AspectRatio&#x0A;Which is: 2164634312(0x8105b2c8)&#x0A;获取的视频宽高比错误" type=""><![CDATA[gtest/case/module/test_av.cpp:1509<br />
Value of: CHDRV_VIDEO_ASPECT_4X3<br />
  Actual: 0(0x0)<br />
Expected: vidInfo.enm_AspectRatio<br />
Which is: 2164634312(0x8105b2c8)<br />
获取的视频宽高比错误]]></failure>
      <failure message="Value of: CH_VIDEO_CODE_MPEG2&#x0A;  Actual: 0(0x0)&#x0A;Expected: vidInfo.enm_DecodeType&#x0A;Which is: 2153327108(0x80592a04)&#x0A;获取的视频编码类型错误" type=""><![CDATA[gtest/case/module/test_av.cpp:1510<br />
Value of: CH_VIDEO_CODE_MPEG2<br />
  Actual: 0(0x0)<br />
Expected: vidInfo.enm_DecodeType<br />
Which is: 2153327108(0x80592a04)<br />
获取的视频编码类型错误]]></failure>
    </testcase>
    <testcase name="TEST_AV_FORMAT" description="音频视频格式支持测试，依次从env中读取码流名称，测试完所有码流，列出不支持和未测试到的格式" status="run" classname="TestAV" time="1832.022">
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为音频格式[CH_AUDIO_CODE_AAC_LOAS]未输出成功，码流名称为:HeAAC.ts&amp;program=2&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1620<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为音频格式[CH_AUDIO_CODE_AAC_LOAS]未输出成功，码流名称为:HeAAC.ts&program=2<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为音频格式[CH_AUDIO_CODE_AAC_LOAS]未输出成功，码流名称为:530_AAC_LOAS_纯音频测试.ts&amp;program=1&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1620<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为音频格式[CH_AUDIO_CODE_AAC_LOAS]未输出成功，码流名称为:530_AAC_LOAS_纯音频测试.ts&program=1<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为音频格式[CH_AUDIO_CODE_AAC_LOAS]未输出成功，码流名称为:530_AAC_LOAS_纯音频测试.ts&amp;program=1&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1620<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为音频格式[CH_AUDIO_CODE_AAC_LOAS]未输出成功，码流名称为:530_AAC_LOAS_纯音频测试.ts&program=1<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为音频格式[CH_AUDIO_CODE_AAC_LOAS]未输出成功，码流名称为:530_AAC_LOAS_纯音频测试.ts&amp;program=1&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1620<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为音频格式[CH_AUDIO_CODE_AAC_LOAS]未输出成功，码流名称为:530_AAC_LOAS_纯音频测试.ts&program=1<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为视频格式[CH_VIDEO_CODE_AVS]未输出成功，码流名称为:008_avs_MP2.ts&amp;program=1&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1649<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为视频格式[CH_VIDEO_CODE_AVS]未输出成功，码流名称为:008_avs_MP2.ts&program=1<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为视频格式[CH_VIDEO_CODE_AVS]未输出成功，码流名称为:1280x720p_30_6M_AVS_MP2.ts&amp;program=14368&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1649<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为视频格式[CH_VIDEO_CODE_AVS]未输出成功，码流名称为:1280x720p_30_6M_AVS_MP2.ts&program=14368<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为视频格式[CH_VIDEO_CODE_AVS]未输出成功，码流名称为:AVS+.ts&amp;program=2&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1649<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为视频格式[CH_VIDEO_CODE_AVS]未输出成功，码流名称为:AVS+.ts&program=2<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为视频格式[CH_VIDEO_CODE_AVS]未输出成功，码流名称为:AVS+.ts&amp;program=17&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1649<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为视频格式[CH_VIDEO_CODE_AVS]未输出成功，码流名称为:AVS+.ts&program=17<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为音频格式[CH_AUDIO_CODE_DTS]未输出成功，码流名称为:DTSTEST.ts&amp;program=2&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1620<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为音频格式[CH_AUDIO_CODE_DTS]未输出成功，码流名称为:DTSTEST.ts&program=2<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为音频格式[CH_AUDIO_CODE_MPEG1]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&amp;program=0x145&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1620<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为音频格式[CH_AUDIO_CODE_MPEG1]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&program=0x145<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为视频格式[CH_VIDEO_CODE_H264]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&amp;program=0x145&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1649<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为视频格式[CH_VIDEO_CODE_H264]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&program=0x145<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为音频格式[CH_AUDIO_CODE_MPEG1]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&amp;program=0x146&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1620<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为音频格式[CH_AUDIO_CODE_MPEG1]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&program=0x146<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为视频格式[CH_VIDEO_CODE_H264]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&amp;program=0x146&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1649<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为视频格式[CH_VIDEO_CODE_H264]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&program=0x146<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为音频格式[CH_AUDIO_CODE_MPEG1]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&amp;program=0x147&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1620<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为音频格式[CH_AUDIO_CODE_MPEG1]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&program=0x147<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为视频格式[CH_VIDEO_CODE_H264]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&amp;program=0x147&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1649<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为视频格式[CH_VIDEO_CODE_H264]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&program=0x147<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为音频格式[CH_AUDIO_CODE_MPEG1]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&amp;program=0x148&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1620<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为音频格式[CH_AUDIO_CODE_MPEG1]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&program=0x148<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为视频格式[CH_VIDEO_CODE_H264]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&amp;program=0x148&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1649<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为视频格式[CH_VIDEO_CODE_H264]未输出成功，码流名称为:H.264标清+410+mtunes+aac.ts&program=0x148<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为音频格式[CH_AUDIO_CODE_AC3]未输出成功，码流名称为:H.264标清+AC-3_090615_586MHZ.ts&amp;program=83&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1620<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为音频格式[CH_AUDIO_CODE_AC3]未输出成功，码流名称为:H.264标清+AC-3_090615_586MHZ.ts&program=83<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为音频格式[CH_AUDIO_CODE_AC3]未输出成功，码流名称为:H.264标清+AC-3_090615_586MHZ.ts&amp;program=85&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1620<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为音频格式[CH_AUDIO_CODE_AC3]未输出成功，码流名称为:H.264标清+AC-3_090615_586MHZ.ts&program=85<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为音频格式[CH_AUDIO_CODE_AAC_ADTS]未输出成功，码流名称为:fhd_hevc_aac.ts&amp;program=1&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1620<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为音频格式[CH_AUDIO_CODE_AAC_ADTS]未输出成功，码流名称为:fhd_hevc_aac.ts&program=1<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为视频格式[CH_VIDEO_CODE_H265]未输出成功，码流名称为:fhd_hevc_aac.ts&amp;program=1&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1649<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为视频格式[CH_VIDEO_CODE_H265]未输出成功，码流名称为:fhd_hevc_aac.ts&program=1<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为音频格式[CH_AUDIO_CODE_AAC_ADTS]未输出成功，码流名称为:H265_展示.ts&amp;program=1&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1620<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为音频格式[CH_AUDIO_CODE_AAC_ADTS]未输出成功，码流名称为:H265_展示.ts&program=1<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为音频格式[CH_AUDIO_CODE_AC3]未输出成功，码流名称为:rampage-w-audio_4K.ts&amp;program=1&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1620<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为音频格式[CH_AUDIO_CODE_AC3]未输出成功，码流名称为:rampage-w-audio_4K.ts&program=1<br />
]]></failure>
      <failure message="Value of: false&#x0A;  Actual: false&#x0A;Expected: true&#x0A;测试员认为视频格式[CH_VIDEO_CODE_H265]未输出成功，码流名称为:rampage-w-audio_4K.ts&amp;program=1&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1649<br />
Value of: false<br />
  Actual: false<br />
Expected: true<br />
测试员认为视频格式[CH_VIDEO_CODE_H265]未输出成功，码流名称为:rampage-w-audio_4K.ts&program=1<br />
]]></failure>
      <failure message="Value of: 0&#x0A;  Actual: 0(0x0)&#x0A;Expected: i_fail_test&#x0A;Which is: 5(0x5)&#x0A;测试员认为如下5种音频格式播放没有输出:&#x0A;CH_AUDIO_CODE_MPEG1,CH_AUDIO_CODE_AC3,CH_AUDIO_CODE_AAC_ADTS,CH_AUDIO_CODE_AAC_LOAS&#x0A;CH_AUDIO_CODE_DTS,&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1711<br />
Value of: 0<br />
  Actual: 0(0x0)<br />
Expected: i_fail_test<br />
Which is: 5(0x5)<br />
测试员认为如下5种音频格式播放没有输出:<br />
CH_AUDIO_CODE_MPEG1,CH_AUDIO_CODE_AC3,CH_AUDIO_CODE_AAC_ADTS,CH_AUDIO_CODE_AAC_LOAS<br />
CH_AUDIO_CODE_DTS,<br />
]]></failure>
      <failure message="Value of: 0&#x0A;  Actual: 0(0x0)&#x0A;Expected: i_not_test&#x0A;Which is: 8(0x8)&#x0A;如下8种音频格式未测试:&#x0A;CH_AUDIO_CODE_MP3,CH_AUDIO_CODE_HEAAC_ADTS,CH_AUDIO_CODE_HEAAC_LOAS,CH_AUDIO_CODE_WMA&#x0A;CH_AUDIO_CODE_LPCM,CH_AUDIO_CODE_ATRAC,CH_AUDIO_CODE_COOK,CH_AUDIO_CODE_DRA&#x0A;&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1713<br />
Value of: 0<br />
  Actual: 0(0x0)<br />
Expected: i_not_test<br />
Which is: 8(0x8)<br />
如下8种音频格式未测试:<br />
CH_AUDIO_CODE_MP3,CH_AUDIO_CODE_HEAAC_ADTS,CH_AUDIO_CODE_HEAAC_LOAS,CH_AUDIO_CODE_WMA<br />
CH_AUDIO_CODE_LPCM,CH_AUDIO_CODE_ATRAC,CH_AUDIO_CODE_COOK,CH_AUDIO_CODE_DRA<br />
<br />
]]></failure>
      <failure message="Value of: 0&#x0A;  Actual: 0(0x0)&#x0A;Expected: i_ok_test&#x0A;Which is: 4(0x4)&#x0A;如下4种音频格式播出正常:&#x0A;CH_AUDIO_CODE_MPEG1,CH_AUDIO_CODE_MPEG2,CH_AUDIO_CODE_AC3,CH_AUDIO_CODE_AC3_PLUS&#x0A;&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1714<br />
Value of: 0<br />
  Actual: 0(0x0)<br />
Expected: i_ok_test<br />
Which is: 4(0x4)<br />
如下4种音频格式播出正常:<br />
CH_AUDIO_CODE_MPEG1,CH_AUDIO_CODE_MPEG2,CH_AUDIO_CODE_AC3,CH_AUDIO_CODE_AC3_PLUS<br />
<br />
]]></failure>
      <failure message="Value of: 0&#x0A;  Actual: 0(0x0)&#x0A;Expected: i_fail_test&#x0A;Which is: 3(0x3)&#x0A;测试员认为如下3种视频格式播放没有输出:&#x0A;CH_VIDEO_CODE_H264,CH_VIDEO_CODE_AVS,CH_VIDEO_CODE_H265,&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1753<br />
Value of: 0<br />
  Actual: 0(0x0)<br />
Expected: i_fail_test<br />
Which is: 3(0x3)<br />
测试员认为如下3种视频格式播放没有输出:<br />
CH_VIDEO_CODE_H264,CH_VIDEO_CODE_AVS,CH_VIDEO_CODE_H265,<br />
]]></failure>
      <failure message="Value of: 0&#x0A;  Actual: 0(0x0)&#x0A;Expected: i_not_test&#x0A;Which is: 13(0xd)&#x0A;如下13种视频格式未测试:&#x0A;CH_VIDEO_CODE_MPEG2_HD,CH_VIDEO_CODE_MPEG4_ASP_A,CH_VIDEO_CODE_MPEG4_ASP_B,CH_VIDEO_CODE_MPEG4_ASP_C&#x0A;CH_VIDEO_CODE_DIVX,CH_VIDEO_CODE_VC1,CH_VIDEO_CODE_VP6,CH_VIDEO_CODE_VP6A&#x0A;CH_VIDEO_CODE_VP6F,CH_VIDEO_CODE_VP8,CH_VIDEO_CODE_REAL8,CH_VIDEO_CODE_REAL9&#x0A;CH_VIDEO_CODE_SORENSON,&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1755<br />
Value of: 0<br />
  Actual: 0(0x0)<br />
Expected: i_not_test<br />
Which is: 13(0xd)<br />
如下13种视频格式未测试:<br />
CH_VIDEO_CODE_MPEG2_HD,CH_VIDEO_CODE_MPEG4_ASP_A,CH_VIDEO_CODE_MPEG4_ASP_B,CH_VIDEO_CODE_MPEG4_ASP_C<br />
CH_VIDEO_CODE_DIVX,CH_VIDEO_CODE_VC1,CH_VIDEO_CODE_VP6,CH_VIDEO_CODE_VP6A<br />
CH_VIDEO_CODE_VP6F,CH_VIDEO_CODE_VP8,CH_VIDEO_CODE_REAL8,CH_VIDEO_CODE_REAL9<br />
CH_VIDEO_CODE_SORENSON,<br />
]]></failure>
      <failure message="Value of: 0&#x0A;  Actual: 0(0x0)&#x0A;Expected: i_ok_test&#x0A;Which is: 4(0x4)&#x0A;如下4种音频格式播出正常:&#x0A;CH_VIDEO_CODE_MPEG2,CH_VIDEO_CODE_MPEG4_ASP,CH_VIDEO_CODE_H264,CH_VIDEO_CODE_H265&#x0A;&#x0A;" type=""><![CDATA[gtest/case/module/test_av.cpp:1756<br />
Value of: 0<br />
  Actual: 0(0x0)<br />
Expected: i_ok_test<br />
Which is: 4(0x4)<br />
如下4种音频格式播出正常:<br />
CH_VIDEO_CODE_MPEG2,CH_VIDEO_CODE_MPEG4_ASP,CH_VIDEO_CODE_H264,CH_VIDEO_CODE_H265<br />
<br />
]]></failure>
    </testcase>
    <testcase name="TEST_AV_MUL_AUDIO" description="播放一个多音频码流，来回切换多音频，画面不卡顿，音频切换无爆音" status="run" classname="TestAV" time="288.225">
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;码流DTSTEST.ts&amp;program=2，第1路，音频格式为:CH_AUDIO_CODE_DTS 切换效果不佳" type=""><![CDATA[gtest/case/module/test_av.cpp:1825<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
码流DTSTEST.ts&program=2，第1路，音频格式为:CH_AUDIO_CODE_DTS 切换效果不佳]]></failure>
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;码流DTSTEST.ts&amp;program=2，第0路，音频格式为:CH_AUDIO_CODE_MPEG2 切换效果不佳" type=""><![CDATA[gtest/case/module/test_av.cpp:1825<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
码流DTSTEST.ts&program=2，第0路，音频格式为:CH_AUDIO_CODE_MPEG2 切换效果不佳]]></failure>
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;码流DTSTEST.ts&amp;program=2，第1路，音频格式为:CH_AUDIO_CODE_DTS 切换效果不佳" type=""><![CDATA[gtest/case/module/test_av.cpp:1825<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
码流DTSTEST.ts&program=2，第1路，音频格式为:CH_AUDIO_CODE_DTS 切换效果不佳]]></failure>
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;码流DTSTEST.ts&amp;program=2，第0路，音频格式为:CH_AUDIO_CODE_MPEG2 切换效果不佳" type=""><![CDATA[gtest/case/module/test_av.cpp:1825<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
码流DTSTEST.ts&program=2，第0路，音频格式为:CH_AUDIO_CODE_MPEG2 切换效果不佳]]></failure>
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;码流DTSTEST.ts&amp;program=2，第1路，音频格式为:CH_AUDIO_CODE_DTS 切换效果不佳" type=""><![CDATA[gtest/case/module/test_av.cpp:1825<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
码流DTSTEST.ts&program=2，第1路，音频格式为:CH_AUDIO_CODE_DTS 切换效果不佳]]></failure>
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;码流DTSTEST.ts&amp;program=2，第0路，音频格式为:CH_AUDIO_CODE_MPEG2 切换效果不佳" type=""><![CDATA[gtest/case/module/test_av.cpp:1825<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
码流DTSTEST.ts&program=2，第0路，音频格式为:CH_AUDIO_CODE_MPEG2 切换效果不佳]]></failure>
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;码流DTSTEST.ts&amp;program=2，第1路，音频格式为:CH_AUDIO_CODE_DTS 切换效果不佳" type=""><![CDATA[gtest/case/module/test_av.cpp:1825<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
码流DTSTEST.ts&program=2，第1路，音频格式为:CH_AUDIO_CODE_DTS 切换效果不佳]]></failure>
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;码流DTSTEST.ts&amp;program=2，第1路，音频格式为:CH_AUDIO_CODE_DTS 切换效果不佳" type=""><![CDATA[gtest/case/module/test_av.cpp:1825<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
码流DTSTEST.ts&program=2，第1路，音频格式为:CH_AUDIO_CODE_DTS 切换效果不佳]]></failure>
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;码流ac3_mpeg2_多音频测试.ts&amp;program=1，第1路，音频格式为:CH_AUDIO_CODE_AC3 切换效果不佳" type=""><![CDATA[gtest/case/module/test_av.cpp:1825<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
码流ac3_mpeg2_多音频测试.ts&program=1，第1路，音频格式为:CH_AUDIO_CODE_AC3 切换效果不佳]]></failure>
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;码流ac3_mpeg2_多音频测试.ts&amp;program=1，第0路，音频格式为:CH_AUDIO_CODE_MPEG2 切换效果不佳" type=""><![CDATA[gtest/case/module/test_av.cpp:1825<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
码流ac3_mpeg2_多音频测试.ts&program=1，第0路，音频格式为:CH_AUDIO_CODE_MPEG2 切换效果不佳]]></failure>
    </testcase>
    <testcase name="TEST_AV_SYNC" description="播放一个同步有问题的码流，声音、视频是否正常" status="run" classname="TestAV" time="250.391">
      <failure message="Value of: 0&#x0A;  Actual: 0(0x0)&#x0A;Expected: ret&#x0A;Which is: -1(0xffffffff)&#x0A;播放失败，码流名称为[同步问题码流-播放有时无声音.ts&amp;program=1]" type=""><![CDATA[gtest/case/module/test_av.cpp:1875<br />
Value of: 0<br />
  Actual: 0(0x0)<br />
Expected: ret<br />
Which is: -1(0xffffffff)<br />
播放失败，码流名称为[同步问题码流-播放有时无声音.ts&program=1]]]></failure>
      <failure message="Value of: 0&#x0A;  Actual: 0(0x0)&#x0A;Expected: ret&#x0A;Which is: -1(0xffffffff)&#x0A;播放失败，码流名称为[音视频卡顿清流.ts&amp;program=0x4add]" type=""><![CDATA[gtest/case/module/test_av.cpp:1875<br />
Value of: 0<br />
  Actual: 0(0x0)<br />
Expected: ret<br />
Which is: -1(0xffffffff)<br />
播放失败，码流名称为[音视频卡顿清流.ts&program=0x4add]]]></failure>
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;码流H.264_2M_同步差.ts&amp;program=0x1，service_id=1,音频格式为:CH_AUDIO_CODE_MPEG1,视频格式为:CH_VIDEO_CODE_H264 播放效果不佳" type=""><![CDATA[gtest/case/module/test_av.cpp:1884<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
码流H.264_2M_同步差.ts&program=0x1，service_id=1,音频格式为:CH_AUDIO_CODE_MPEG1,视频格式为:CH_VIDEO_CODE_H264 播放效果不佳]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="TestMplay" tests="3/3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_MPLAY_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestMplay" time="0"/>
    <testcase name="TEST_MPLAY_INIT2" description="测试模块是否可被销毁" status="run" classname="TestMplay" time="0.015">
      <failure message="Value of: CH_MPLAY_Term()&#x0A;  Actual: 2(0x2)&#x0A;Expected: CH_MPLAY_OK&#x0A;Which is: 0(0x0)" type=""><![CDATA[gtest/case/module/test_mplay.cpp:56<br />
Value of: CH_MPLAY_Term()<br />
  Actual: 2(0x2)<br />
Expected: CH_MPLAY_OK<br />
Which is: 0(0x0)]]></failure>
    </testcase>
    <testcase name="TEST_MPLAY_INIT3" description="测试CH_MPLAY_GetVersion是否成功" status="run" classname="TestMplay" time="0.002"/>
  </testsuite>
  <testsuite name="TestPvr" tests="3/3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_PVR_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestPvr" time="0"/>
    <testcase name="TEST_PVR_INIT2" description="测试模块是否可被销毁" status="run" classname="TestPvr" time="0.003"/>
    <testcase name="TEST_PVR_INIT3" description="测试CHDRV_PVR_GetVersion是否成功" status="run" classname="TestPvr" time="0.003"/>
  </testsuite>
  <testsuite name="TestHdmi" tests="82/82" failures="0" disabled="0" errors="0" time="0">
    <testcase name="TEST_HDMI_INIT1" description="测试多次初始化时是否返回OK" status="run" classname="TestHdmi" time="0"/>
    <testcase name="TEST_HDMI_INIT2" description="测试模块是否可被销毁" status="run" classname="TestHdmi" time="0"/>
    <testcase name="TEST_HDMI_INIT3" description="测试CH_HDMI_GetVersion是否成功" status="run" classname="TestHdmi" time="0.003"/>
    <testcase name="TEST_HDMI_OPEN" description="测试调用OPEN HDMI是否成功" status="run" classname="TestHdmi" time="0"/>
    <testcase name="TEST_HDMI_CALL1" description="测试安装3个不同的回调函数是否成功" status="run" classname="TestHdmi" time="0.063">
      <failure message="Value of: CH_HDMI_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_HDMI_InstallCallback(test_hdmi_callback1, __null)&#x0A;Which is: 1(0x1)&#x0A;回调函数1 注册成功应返回CH_HDMI_OK" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:670<br />
Value of: CH_HDMI_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_HDMI_InstallCallback(test_hdmi_callback1, __null)<br />
Which is: 1(0x1)<br />
回调函数1 注册成功应返回CH_HDMI_OK]]></failure>
      <failure message="Value of: CH_HDMI_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_HDMI_InstallCallback(test_hdmi_callback2, __null)&#x0A;Which is: 1(0x1)&#x0A;回调函数2 注册成功应返回CH_HDMI_OK" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:672<br />
Value of: CH_HDMI_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_HDMI_InstallCallback(test_hdmi_callback2, __null)<br />
Which is: 1(0x1)<br />
回调函数2 注册成功应返回CH_HDMI_OK]]></failure>
      <failure message="Value of: CH_HDMI_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_HDMI_InstallCallback(test_hdmi_callback3, __null)&#x0A;Which is: 1(0x1)&#x0A;回调函数3 注册成功应返回CH_HDMI_OK" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:674<br />
Value of: CH_HDMI_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_HDMI_InstallCallback(test_hdmi_callback3, __null)<br />
Which is: 1(0x1)<br />
回调函数3 注册成功应返回CH_HDMI_OK]]></failure>
    </testcase>
    <testcase name="TEST_HDMI_CALL2" description="提示测试员插入HDMI连接电视，是否3个回调均收到了插入通知" status="run" classname="TestHdmi" time="16.797">
      <failure message="Value of: 3&#x0A;  Actual: 3(0x3)&#x0A;Expected: g_count_event&#x0A;Which is: 0(0x0)&#x0A;重新拔插后应该收到三个插入通知" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:685<br />
Value of: 3<br />
  Actual: 3(0x3)<br />
Expected: g_count_event<br />
Which is: 0(0x0)<br />
重新拔插后应该收到三个插入通知]]></failure>
    </testcase>
    <testcase name="TEST_HDMI_KEY1" description="调用LoadHDCPKey设置一组正确的HDCP KEY，应成功，回调收到认证成功通知" status="run" classname="TestHdmi" time="0.05">
      <failure message="Value of: CH_HDMI_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_HDMI_LoadHDCPKey(CH_HDMI_ID_0 , &amp;rpstru_HdcpKey)&#x0A;Which is: 3(0x3)&#x0A;设置正确HDCP KEY失败" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:712<br />
Value of: CH_HDMI_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_HDMI_LoadHDCPKey(CH_HDMI_ID_0 , &rpstru_HdcpKey)<br />
Which is: 3(0x3)<br />
设置正确HDCP KEY失败]]></failure>
      <failure message="Value of: 3&#x0A;  Actual: 3(0x3)&#x0A;Expected: gt_setHDCP_count&#x0A;Which is: 0(0x0)&#x0A;应该收到三个HDCP KEY认证成功通知" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:714<br />
Value of: 3<br />
  Actual: 3(0x3)<br />
Expected: gt_setHDCP_count<br />
Which is: 0(0x0)<br />
应该收到三个HDCP KEY认证成功通知]]></failure>
    </testcase>
    <testcase name="TEST_HDMI_HDCP1" description="确认HDMI输出应正常，获取属性与设置的一致" status="run" classname="TestHdmi" time="3.117"/>
    <testcase name="TEST_HDMI_HDCP2" description="确认HDMI输出应正常，获取属性与设置的一致" status="run" classname="TestHdmi" time="3.977"/>
    <testcase name="TEST_HDMI_HDCP3" description="确认HDMI输出应正常并收到回调通知，获取属性与设置的一致" status="run" classname="TestHdmi" time="1.074">
      <failure message="Value of: 3&#x0A;  Actual: 3(0x3)&#x0A;Expected: g_closeHDCP_count&#x0A;Which is: 0(0x0)&#x0A;应该收到三个DHCP关闭通知" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:735<br />
Value of: 3<br />
  Actual: 3(0x3)<br />
Expected: g_closeHDCP_count<br />
Which is: 0(0x0)<br />
应该收到三个DHCP关闭通知]]></failure>
    </testcase>
    <testcase name="TEST_HDMI_HDCP4" description="确认HDMI 无输出，获取属性与设置的一致" status="run" classname="TestHdmi" time="3.295">
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;参数b_HdmiEnable为FALSE，HDMI应关闭输出" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:463<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
参数b_HdmiEnable为FALSE，HDMI应关闭输出]]></failure>
    </testcase>
    <testcase name="TEST_HDMI_KEY2" description="调用LoadHDCPKey设置一组错误的HDCP KEY，应成功，回调收到认证失败通知" status="run" classname="TestHdmi" time="0.064">
      <failure message="Value of: 3&#x0A;  Actual: 3(0x3)&#x0A;Expected: gf_setHDCP_count&#x0A;Which is: 0(0x0)&#x0A;应该收到三个HDCP KEY设置失败通知" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:770<br />
Value of: 3<br />
  Actual: 3(0x3)<br />
Expected: gf_setHDCP_count<br />
Which is: 0(0x0)<br />
应该收到三个HDCP KEY设置失败通知]]></failure>
    </testcase>
    <testcase name="TEST_HDMI_HDCP5" description="确认HDMI输出应正常，获取属性与设置的一致" status="run" classname="TestHdmi" time="1.677"/>
    <testcase name="TEST_HDMI_HDCP6" description="确认HDMI 无输出，获取属性与设置的一致" status="run" classname="TestHdmi" time="1.008"/>
    <testcase name="TEST_HDMI_HDCP7" description="确认HDMI输出应正常并收到回调函数，获取属性与设置的一致" status="run" classname="TestHdmi" time="1.353">
      <failure message="Value of: 3&#x0A;  Actual: 3(0x3)&#x0A;Expected: g_closeHDCP_count&#x0A;Which is: 0(0x0)&#x0A;应该收到三个DHCP关闭通知" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:792<br />
Value of: 3<br />
  Actual: 3(0x3)<br />
Expected: g_closeHDCP_count<br />
Which is: 0(0x0)<br />
应该收到三个DHCP关闭通知]]></failure>
    </testcase>
    <testcase name="TEST_HDMI_HDCP8" description="确认HDMI 无输出，获取属性与设置的一致" status="run" classname="TestHdmi" time="1.324">
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;参数b_HdmiEnable为FALSE，HDMI应关闭输出" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:562<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
参数b_HdmiEnable为FALSE，HDMI应关闭输出]]></failure>
    </testcase>
    <testcase name="TEST_HDMI_HDCP9" description="测试GetSinkCapability应成功，能力集获取正确" status="run" classname="TestHdmi" time="1.953">
      <failure message="Value of: CH_HDMI_OK&#x0A;  Actual: 0(0x0)&#x0A;Expected: CH_HDMI_GetSinkCapability(CH_HDMI_ID_0, &amp;rpstru_Capability)&#x0A;Which is: 1(0x1)&#x0A;获取能力集应该成功返回CH_HDMI_OK" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:576<br />
Value of: CH_HDMI_OK<br />
  Actual: 0(0x0)<br />
Expected: CH_HDMI_GetSinkCapability(CH_HDMI_ID_0, &rpstru_Capability)<br />
Which is: 1(0x1)<br />
获取能力集应该成功返回CH_HDMI_OK]]></failure>
      <failure message="Value of: (1)&#x0A;  Actual: 1(0x1)&#x0A;Expected: test_input_yes()&#x0A;Which is: 0(0x0)&#x0A;获取的能力集不正确" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:641<br />
Value of: (1)<br />
  Actual: 1(0x1)<br />
Expected: test_input_yes()<br />
Which is: 0(0x0)<br />
获取的能力集不正确]]></failure>
      <failure message="Expected: (rpstru_Capability.enm_VideoFmtSupported[0]) != (CH_HDMI_VIDEO_FMT_NONE), actual: 0(0x0) vs 0(0x0)&#x0A;视频格式不能为无效值" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:643<br />
Expected: (rpstru_Capability.enm_VideoFmtSupported[0]) != (CH_HDMI_VIDEO_FMT_NONE), actual: 0(0x0) vs 0(0x0)<br />
视频格式不能为无效值]]></failure>
      <failure message="Expected: (rpstru_Capability.enm_AudioFmtSupported[0]) != (CH_HDMI_AUDIO_FMT_NONE), actual: 0(0x0) vs 0(0x0)&#x0A;音频格式不能为无效值" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:644<br />
Expected: (rpstru_Capability.enm_AudioFmtSupported[0]) != (CH_HDMI_AUDIO_FMT_NONE), actual: 0(0x0) vs 0(0x0)<br />
音频格式不能为无效值]]></failure>
    </testcase>
    <testcase name="TEST_HDMI_PLUG" description="测试反复拔插4次，HDMI均应工作正常，回调正常" status="run" classname="TestHdmi" time="11.642">
      <failure message="Value of: 3&#x0A;  Actual: 3(0x3)&#x0A;Expected: g_count_event&#x0A;Which is: 0(0x0)&#x0A;HDMI连接电视应该收到三个插入回调通知" type=""><![CDATA[gtest/case/module/test_hdmi.cpp:660<br />
Value of: 3<br />
  Actual: 3(0x3)<br />
Expected: g_count_event<br />
Which is: 0(0x0)<br />
HDMI连接电视应该收到三个插入回调通知]]></failure>
    </testcase>
    <testcase name="TEST_HDMI_CALL3" description="测试卸载所有回调，应成功" status="run" classname="TestHdmi" time="0"/>
    <testcase name="TEST_HDMI_CLOSE" description="测试CLOSE HDMI，应成功" status="run" classname="TestHdmi" time="0"/>
  </testsuite>
